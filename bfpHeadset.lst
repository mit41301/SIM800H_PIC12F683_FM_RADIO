;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10/24/2018 12:47:09 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2BC4      	GOTO       964
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00B0      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00AF      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A2      	MOVWF      34
0x000D	0x0871      	MOVF       R1, 0
0x000E	0x00A1      	MOVWF      33
0x000F	0x0872      	MOVF       R2, 0
0x0010	0x00A0      	MOVWF      32
;bfpHeadset.c,535 :: 		void interrupt() {
;bfpHeadset.c,536 :: 		if (INTF_bit) { //rotary encoder push
0x0011	0x1C8B      	BTFSS      INTF_bit, BitPos(INTF_bit+0)
0x0012	0x281D      	GOTO       L_interrupt114
;bfpHeadset.c,537 :: 		PushedNoRotate = 0b1;
0x0013	0x162A      	BSF        _PushedNoRotate, BitPos(_PushedNoRotate+0)
;bfpHeadset.c,538 :: 		if (Power) RotHasPushed = 0b1; else RotateAct = ACT_NONE;
0x0014	0x1F2A      	BTFSS      _Power, BitPos(_Power+0)
0x0015	0x2818      	GOTO       L_interrupt115
0x0016	0x142A      	BSF        _RotHasPushed, BitPos(_RotHasPushed+0)
0x0017	0x281A      	GOTO       L_interrupt116
L_interrupt115:
0x0018	0x3064      	MOVLW      100
0x0019	0x00AD      	MOVWF      _RotateAct
L_interrupt116:
;bfpHeadset.c,539 :: 		NoActivity = NO_ACTIVITY_TIME;
0x001A	0x3020      	MOVLW      32
0x001B	0x00AB      	MOVWF      _NoActivity
;bfpHeadset.c,540 :: 		INTF_bit = 0b0;
0x001C	0x108B      	BCF        INTF_bit, BitPos(INTF_bit+0)
;bfpHeadset.c,541 :: 		}
L_interrupt114:
;bfpHeadset.c,542 :: 		if (GPIF_bit) { //rotary encoder rotate
0x001D	0x1C0B      	BTFSS      GPIF_bit, BitPos(GPIF_bit+0)
0x001E	0x2874      	GOTO       L_interrupt117
;bfpHeadset.c,543 :: 		if ((LastClk != RotClk) || (LastDat != RotDat)) {
0x001F	0x19AA      	BTFSC      _LastClk, BitPos(_LastClk+0)
0x0020	0x2824      	GOTO       L__interrupt246
0x0021	0x1E05      	BTFSS      GP4_bit, BitPos(GP4_bit+0)
0x0022	0x2826      	GOTO       L__interrupt247
0x0023	0x282E      	GOTO       L__interrupt228
L__interrupt246:
0x0024	0x1E05      	BTFSS      GP4_bit, BitPos(GP4_bit+0)
0x0025	0x282E      	GOTO       L__interrupt228
L__interrupt247:
0x0026	0x18AA      	BTFSC      _LastDat, BitPos(_LastDat+0)
0x0027	0x282B      	GOTO       L__interrupt248
0x0028	0x1E85      	BTFSS      GP5_bit, BitPos(GP5_bit+0)
0x0029	0x282D      	GOTO       L__interrupt249
0x002A	0x282E      	GOTO       L__interrupt228
L__interrupt248:
0x002B	0x1E85      	BTFSS      GP5_bit, BitPos(GP5_bit+0)
0x002C	0x282E      	GOTO       L__interrupt228
L__interrupt249:
0x002D	0x2873      	GOTO       L_interrupt120
L__interrupt228:
;bfpHeadset.c,544 :: 		Seq = (Seq << 1) | RotClk;
0x002E	0x0824      	MOVF       _Seq, 0
0x002F	0x00F1      	MOVWF      R1
0x0030	0x0DF1      	RLF        R1, 1
0x0031	0x1071      	BCF        R1, 0
0x0032	0x01F0      	CLRF       R0
0x0033	0x1A05      	BTFSC      GP4_bit, BitPos(GP4_bit+0)
0x0034	0x0AF0      	INCF       R0, 1
0x0035	0x0870      	MOVF       R0, 0
0x0036	0x0471      	IORWF      R1, 0
0x0037	0x00A4      	MOVWF      _Seq
;bfpHeadset.c,545 :: 		Seq.B4 = RotDat;
0x0038	0x1A85      	BTFSC      GP5_bit, BitPos(GP5_bit+0)
0x0039	0x283C      	GOTO       L__interrupt250
0x003A	0x1224      	BCF        _Seq, 4
0x003B	0x283D      	GOTO       L__interrupt251
L__interrupt250:
0x003C	0x1624      	BSF        _Seq, 4
L__interrupt251:
;bfpHeadset.c,546 :: 		if (Seq == 0b00111001) {
0x003D	0x0824      	MOVF       _Seq, 0
0x003E	0x3A39      	XORLW      57
0x003F	0x1D03      	BTFSS      STATUS, 2
0x0040	0x2852      	GOTO       L_interrupt121
;bfpHeadset.c,547 :: 		if (Power) {
0x0041	0x1F2A      	BTFSS      _Power, BitPos(_Power+0)
0x0042	0x284A      	GOTO       L_interrupt122
;bfpHeadset.c,548 :: 		RotateAct = ACT_DOWN_DEC;
0x0043	0x3001      	MOVLW      1
0x0044	0x00AD      	MOVWF      _RotateAct
;bfpHeadset.c,549 :: 		if (RotPush) RotateAct += 2;
0x0045	0x1D05      	BTFSS      GP2_bit, BitPos(GP2_bit+0)
0x0046	0x2849      	GOTO       L_interrupt123
0x0047	0x3002      	MOVLW      2
0x0048	0x07AD      	ADDWF      _RotateAct, 1
L_interrupt123:
;bfpHeadset.c,550 :: 		} else if (!RotPush)
0x0049	0x2852      	GOTO       L_interrupt124
L_interrupt122:
0x004A	0x1905      	BTFSC      GP2_bit, BitPos(GP2_bit+0)
0x004B	0x2851      	GOTO       L_interrupt125
;bfpHeadset.c,551 :: 		RotateAct--;
0x004C	0x032D      	DECF       _RotateAct, 0
0x004D	0x00F0      	MOVWF      R0
0x004E	0x0870      	MOVF       R0, 0
0x004F	0x00AD      	MOVWF      _RotateAct
0x0050	0x2852      	GOTO       L_interrupt126
L_interrupt125:
;bfpHeadset.c,553 :: 		CheckCfgMdDec();
0x0051	0x2785      	CALL       _CheckCfgMdDec
L_interrupt126:
L_interrupt124:
;bfpHeadset.c,554 :: 		}
L_interrupt121:
;bfpHeadset.c,555 :: 		if (Seq == 0b10010011) {
0x0052	0x0824      	MOVF       _Seq, 0
0x0053	0x3A93      	XORLW      147
0x0054	0x1D03      	BTFSS      STATUS, 2
0x0055	0x2866      	GOTO       L_interrupt127
;bfpHeadset.c,556 :: 		if (Power) {
0x0056	0x1F2A      	BTFSS      _Power, BitPos(_Power+0)
0x0057	0x285E      	GOTO       L_interrupt128
;bfpHeadset.c,557 :: 		RotateAct = ACT_DOWN_INC;
0x0058	0x01AD      	CLRF       _RotateAct
;bfpHeadset.c,558 :: 		if (RotPush) RotateAct += 2;
0x0059	0x1D05      	BTFSS      GP2_bit, BitPos(GP2_bit+0)
0x005A	0x285D      	GOTO       L_interrupt129
0x005B	0x3002      	MOVLW      2
0x005C	0x07AD      	ADDWF      _RotateAct, 1
L_interrupt129:
;bfpHeadset.c,559 :: 		} else if (!RotPush)
0x005D	0x2866      	GOTO       L_interrupt130
L_interrupt128:
0x005E	0x1905      	BTFSC      GP2_bit, BitPos(GP2_bit+0)
0x005F	0x2865      	GOTO       L_interrupt131
;bfpHeadset.c,560 :: 		RotateAct++;
0x0060	0x0A2D      	INCF       _RotateAct, 0
0x0061	0x00F0      	MOVWF      R0
0x0062	0x0870      	MOVF       R0, 0
0x0063	0x00AD      	MOVWF      _RotateAct
0x0064	0x2866      	GOTO       L_interrupt132
L_interrupt131:
;bfpHeadset.c,562 :: 		CheckCfgMdInc();
0x0065	0x27C1      	CALL       _CheckCfgMdInc
L_interrupt132:
L_interrupt130:
;bfpHeadset.c,563 :: 		}
L_interrupt127:
;bfpHeadset.c,564 :: 		LastClk = RotClk;
0x0066	0x1A05      	BTFSC      GP4_bit, BitPos(GP4_bit+0)
0x0067	0x286A      	GOTO       L__interrupt252
0x0068	0x11AA      	BCF        _LastClk, BitPos(_LastClk+0)
0x0069	0x286B      	GOTO       L__interrupt253
L__interrupt252:
0x006A	0x15AA      	BSF        _LastClk, BitPos(_LastClk+0)
L__interrupt253:
;bfpHeadset.c,565 :: 		LastDat = RotDat;
0x006B	0x1A85      	BTFSC      GP5_bit, BitPos(GP5_bit+0)
0x006C	0x286F      	GOTO       L__interrupt254
0x006D	0x10AA      	BCF        _LastDat, BitPos(_LastDat+0)
0x006E	0x2870      	GOTO       L__interrupt255
L__interrupt254:
0x006F	0x14AA      	BSF        _LastDat, BitPos(_LastDat+0)
L__interrupt255:
;bfpHeadset.c,566 :: 		PushedNoRotate = 0b0;
0x0070	0x122A      	BCF        _PushedNoRotate, BitPos(_PushedNoRotate+0)
;bfpHeadset.c,567 :: 		NoActivity = NO_ACTIVITY_TIME;
0x0071	0x3020      	MOVLW      32
0x0072	0x00AB      	MOVWF      _NoActivity
;bfpHeadset.c,568 :: 		}
L_interrupt120:
;bfpHeadset.c,569 :: 		GPIF_bit = 0b0;
0x0073	0x100B      	BCF        GPIF_bit, BitPos(GPIF_bit+0)
;bfpHeadset.c,570 :: 		}
L_interrupt117:
;bfpHeadset.c,571 :: 		TMR0IE_bit = 0b1;
0x0074	0x168B      	BSF        TMR0IE_bit, BitPos(TMR0IE_bit+0)
;bfpHeadset.c,572 :: 		if (TMR0IF_bit) {
0x0075	0x1D0B      	BTFSS      TMR0IF_bit, BitPos(TMR0IF_bit+0)
0x0076	0x2880      	GOTO       L_interrupt133
;bfpHeadset.c,573 :: 		NoActivity--;
0x0077	0x032B      	DECF       _NoActivity, 0
0x0078	0x00F0      	MOVWF      R0
0x0079	0x0870      	MOVF       R0, 0
0x007A	0x00AB      	MOVWF      _NoActivity
;bfpHeadset.c,574 :: 		if (!NoActivity) TMR0IE_bit = 0b0;
0x007B	0x082B      	MOVF       _NoActivity, 0
0x007C	0x1D03      	BTFSS      STATUS, 2
0x007D	0x287F      	GOTO       L_interrupt134
0x007E	0x128B      	BCF        TMR0IE_bit, BitPos(TMR0IE_bit+0)
L_interrupt134:
;bfpHeadset.c,575 :: 		TMR0IF_bit = 0b0;
0x007F	0x110B      	BCF        TMR0IF_bit, BitPos(TMR0IF_bit+0)
;bfpHeadset.c,576 :: 		}
L_interrupt133:
;bfpHeadset.c,577 :: 		}
L_end_interrupt:
L__interrupt245:
0x0080	0x0822      	MOVF       34, 0
0x0081	0x00F0      	MOVWF      R0
0x0082	0x0821      	MOVF       33, 0
0x0083	0x00F1      	MOVWF      R1
0x0084	0x0820      	MOVF       32, 0
0x0085	0x00F2      	MOVWF      R2
0x0086	0x082F      	MOVF       ___savePCLATH, 0
0x0087	0x008A      	MOVWF      PCLATH
0x0088	0x0E30      	SWAPF      ___saveSTATUS, 0
0x0089	0x0083      	MOVWF      STATUS
0x008A	0x0EFF      	SWAPF      R15, 1
0x008B	0x0E7F      	SWAPF      R15, 0
0x008C	0x0009      	RETFIE
; end of _interrupt
_SendAT:
;bfpHeadset.c,102 :: 		void SendAT(char cmd, char wait200) {
;bfpHeadset.c,104 :: 		GPIE_bit = 0b0;
0x008D	0x118B      	BCF        GPIE_bit, BitPos(GPIE_bit+0)
;bfpHeadset.c,105 :: 		UARTWrite('A');
0x008E	0x3041      	MOVLW      65
0x008F	0x1283      	BCF        STATUS, 5
0x0090	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0091	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,106 :: 		UARTWrite('T');
0x0092	0x3054      	MOVLW      84
0x0093	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0094	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,107 :: 		if (cmd > 9) UARTWrite('+');
0x0095	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x0096	0x3C09      	SUBLW      9
0x0097	0x1803      	BTFSC      STATUS, 0
0x0098	0x289C      	GOTO       L_SendAT8
0x0099	0x302B      	MOVLW      43
0x009A	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x009B	0x2756      	CALL       _UARTWrite
L_SendAT8:
;bfpHeadset.c,109 :: 		if (AT_ATA == cmd) UARTWrite('A');
0x009C	0x3001      	MOVLW      1
0x009D	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x009E	0x1D03      	BTFSS      STATUS, 2
0x009F	0x28A3      	GOTO       L_SendAT9
0x00A0	0x3041      	MOVLW      65
0x00A1	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00A2	0x2756      	CALL       _UARTWrite
L_SendAT9:
;bfpHeadset.c,110 :: 		if (AT_ATH == cmd) UARTWrite('H');
0x00A3	0x3002      	MOVLW      2
0x00A4	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x00A5	0x1D03      	BTFSS      STATUS, 2
0x00A6	0x28AA      	GOTO       L_SendAT10
0x00A7	0x3048      	MOVLW      72
0x00A8	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00A9	0x2756      	CALL       _UARTWrite
L_SendAT10:
;bfpHeadset.c,112 :: 		if (AT_Save == cmd) {
0x00AA	0x3003      	MOVLW      3
0x00AB	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x00AC	0x1D03      	BTFSS      STATUS, 2
0x00AD	0x28B7      	GOTO       L_SendAT11
;bfpHeadset.c,113 :: 		UARTWrite('&');
0x00AE	0x3026      	MOVLW      38
0x00AF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00B0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,114 :: 		UARTWrite('W');
0x00B1	0x3057      	MOVLW      87
0x00B2	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00B3	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,115 :: 		UARTWrite(13);
0x00B4	0x300D      	MOVLW      13
0x00B5	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00B6	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,116 :: 		}
L_SendAT11:
;bfpHeadset.c,117 :: 		if (AT_IPR == cmd) {
0x00B7	0x300B      	MOVLW      11
0x00B8	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x00B9	0x1D03      	BTFSS      STATUS, 2
0x00BA	0x28D3      	GOTO       L_SendAT12
;bfpHeadset.c,118 :: 		UARTWrite('I');
0x00BB	0x3049      	MOVLW      73
0x00BC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00BD	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,119 :: 		UARTWrite('P');
0x00BE	0x3050      	MOVLW      80
0x00BF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00C0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,120 :: 		UARTWrite('R');
0x00C1	0x3052      	MOVLW      82
0x00C2	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00C3	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,121 :: 		UARTWrite('=');
0x00C4	0x303D      	MOVLW      61
0x00C5	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00C6	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,122 :: 		UARTWrite('1');
0x00C7	0x3031      	MOVLW      49
0x00C8	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00C9	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,123 :: 		UARTWrite('2');
0x00CA	0x3032      	MOVLW      50
0x00CB	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00CC	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,124 :: 		UARTWrite('0');
0x00CD	0x3030      	MOVLW      48
0x00CE	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00CF	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,125 :: 		UARTWrite('0');
0x00D0	0x3030      	MOVLW      48
0x00D1	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00D2	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,126 :: 		}
L_SendAT12:
;bfpHeadset.c,127 :: 		if ((AT_CFUN <= cmd) && (AT_CLVL >= cmd)) UARTWrite('C');
0x00D3	0x300C      	MOVLW      12
0x00D4	0x0239      	SUBWF      FARG_SendAT_cmd, 0
0x00D5	0x1C03      	BTFSS      STATUS, 0
0x00D6	0x28DE      	GOTO       L_SendAT15
0x00D7	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x00D8	0x3C13      	SUBLW      19
0x00D9	0x1C03      	BTFSS      STATUS, 0
0x00DA	0x28DE      	GOTO       L_SendAT15
L__SendAT224:
0x00DB	0x3043      	MOVLW      67
0x00DC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00DD	0x2756      	CALL       _UARTWrite
L_SendAT15:
;bfpHeadset.c,128 :: 		if (AT_CFUN == cmd) {
0x00DE	0x300C      	MOVLW      12
0x00DF	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x00E0	0x1D03      	BTFSS      STATUS, 2
0x00E1	0x28F1      	GOTO       L_SendAT16
;bfpHeadset.c,130 :: 		UARTWrite('F');
0x00E2	0x3046      	MOVLW      70
0x00E3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00E4	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,131 :: 		UARTWrite('U');
0x00E5	0x3055      	MOVLW      85
0x00E6	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00E7	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,132 :: 		UARTWrite('N');
0x00E8	0x304E      	MOVLW      78
0x00E9	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00EA	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,133 :: 		UARTWrite('=');
0x00EB	0x303D      	MOVLW      61
0x00EC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00ED	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,135 :: 		UARTWrite('1');
0x00EE	0x3031      	MOVLW      49
0x00EF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00F0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,139 :: 		}
L_SendAT16:
;bfpHeadset.c,141 :: 		if (AT_CMGD_ALL == cmd) {
0x00F1	0x300D      	MOVLW      13
0x00F2	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x00F3	0x1D03      	BTFSS      STATUS, 2
0x00F4	0x290A      	GOTO       L_SendAT17
;bfpHeadset.c,143 :: 		UARTWrite('M');
0x00F5	0x304D      	MOVLW      77
0x00F6	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00F7	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,144 :: 		UARTWrite('G');
0x00F8	0x3047      	MOVLW      71
0x00F9	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00FA	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,145 :: 		UARTWrite('D');
0x00FB	0x3044      	MOVLW      68
0x00FC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x00FD	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,146 :: 		UARTWrite('=');
0x00FE	0x303D      	MOVLW      61
0x00FF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0100	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,147 :: 		UARTWrite('1');
0x0101	0x3031      	MOVLW      49
0x0102	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0103	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,148 :: 		UARTWrite(',');
0x0104	0x302C      	MOVLW      44
0x0105	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0106	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,149 :: 		UARTWrite('4');
0x0107	0x3034      	MOVLW      52
0x0108	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0109	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,150 :: 		}
L_SendAT17:
;bfpHeadset.c,151 :: 		if (AT_CNMI == cmd) {
0x010A	0x300E      	MOVLW      14
0x010B	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x010C	0x1D03      	BTFSS      STATUS, 2
0x010D	0x2923      	GOTO       L_SendAT18
;bfpHeadset.c,153 :: 		UARTWrite('N');
0x010E	0x304E      	MOVLW      78
0x010F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0110	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,154 :: 		UARTWrite('M');
0x0111	0x304D      	MOVLW      77
0x0112	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0113	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,155 :: 		UARTWrite('I');
0x0114	0x3049      	MOVLW      73
0x0115	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0116	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,156 :: 		UARTWrite('=');
0x0117	0x303D      	MOVLW      61
0x0118	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0119	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,157 :: 		UARTWrite('2');
0x011A	0x3032      	MOVLW      50
0x011B	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x011C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,158 :: 		UARTWrite(',');
0x011D	0x302C      	MOVLW      44
0x011E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x011F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,159 :: 		UARTWrite('2');
0x0120	0x3032      	MOVLW      50
0x0121	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0122	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,160 :: 		}
L_SendAT18:
;bfpHeadset.c,161 :: 		if ((AT_PlayRingTone == cmd) || (AT_SetRingTone == cmd)) {
0x0123	0x300F      	MOVLW      15
0x0124	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0125	0x1903      	BTFSC      STATUS, 2
0x0126	0x292C      	GOTO       L__SendAT223
0x0127	0x3010      	MOVLW      16
0x0128	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0129	0x1903      	BTFSC      STATUS, 2
0x012A	0x292C      	GOTO       L__SendAT223
0x012B	0x2954      	GOTO       L_SendAT21
L__SendAT223:
;bfpHeadset.c,163 :: 		UARTWrite('A');
0x012C	0x3041      	MOVLW      65
0x012D	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x012E	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,164 :: 		UARTWrite('L');
0x012F	0x304C      	MOVLW      76
0x0130	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0131	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,165 :: 		UARTWrite('S');
0x0132	0x3053      	MOVLW      83
0x0133	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0134	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,166 :: 		UARTWrite('=');
0x0135	0x303D      	MOVLW      61
0x0136	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0137	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,167 :: 		if (RingTone < 10)
0x0138	0x300A      	MOVLW      10
0x0139	0x0229      	SUBWF      _RingTone, 0
0x013A	0x1803      	BTFSC      STATUS, 0
0x013B	0x2941      	GOTO       L_SendAT22
;bfpHeadset.c,168 :: 		UARTWrite('0' + RingTone);
0x013C	0x0829      	MOVF       _RingTone, 0
0x013D	0x3E30      	ADDLW      48
0x013E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x013F	0x2756      	CALL       _UARTWrite
0x0140	0x294A      	GOTO       L_SendAT23
L_SendAT22:
;bfpHeadset.c,170 :: 		UARTWrite('1');
0x0141	0x3031      	MOVLW      49
0x0142	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0143	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,171 :: 		UARTWrite('0' + RingTone - 10);
0x0144	0x0829      	MOVF       _RingTone, 0
0x0145	0x3E30      	ADDLW      48
0x0146	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0147	0x300A      	MOVLW      10
0x0148	0x02BC      	SUBWF      FARG_UARTWrite_dt, 1
0x0149	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,172 :: 		}
L_SendAT23:
;bfpHeadset.c,173 :: 		if (AT_PlayRingTone == cmd) {
0x014A	0x300F      	MOVLW      15
0x014B	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x014C	0x1D03      	BTFSS      STATUS, 2
0x014D	0x2954      	GOTO       L_SendAT24
;bfpHeadset.c,174 :: 		UARTWrite(',');
0x014E	0x302C      	MOVLW      44
0x014F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0150	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,175 :: 		UARTWrite('1');
0x0151	0x3031      	MOVLW      49
0x0152	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0153	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,176 :: 		}
L_SendAT24:
;bfpHeadset.c,177 :: 		}
L_SendAT21:
;bfpHeadset.c,178 :: 		if ((AT_CRSL == cmd) || (AT_CLVL == cmd)) {
0x0154	0x3011      	MOVLW      17
0x0155	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0156	0x1903      	BTFSC      STATUS, 2
0x0157	0x295D      	GOTO       L__SendAT222
0x0158	0x3013      	MOVLW      19
0x0159	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x015A	0x1903      	BTFSC      STATUS, 2
0x015B	0x295D      	GOTO       L__SendAT222
0x015C	0x297E      	GOTO       L_SendAT27
L__SendAT222:
;bfpHeadset.c,180 :: 		if (AT_CRSL == cmd) {
0x015D	0x3011      	MOVLW      17
0x015E	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x015F	0x1D03      	BTFSS      STATUS, 2
0x0160	0x2968      	GOTO       L_SendAT28
;bfpHeadset.c,181 :: 		UARTWrite('R');
0x0161	0x3052      	MOVLW      82
0x0162	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0163	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,182 :: 		UARTWrite('S');
0x0164	0x3053      	MOVLW      83
0x0165	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0166	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,183 :: 		} else {
0x0167	0x296E      	GOTO       L_SendAT29
L_SendAT28:
;bfpHeadset.c,184 :: 		UARTWrite('L');
0x0168	0x304C      	MOVLW      76
0x0169	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x016A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,185 :: 		UARTWrite('V');
0x016B	0x3056      	MOVLW      86
0x016C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x016D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,186 :: 		}
L_SendAT29:
;bfpHeadset.c,187 :: 		UARTWrite('L');
0x016E	0x304C      	MOVLW      76
0x016F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0170	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,188 :: 		UARTWrite('=');
0x0171	0x303D      	MOVLW      61
0x0172	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0173	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,189 :: 		if (BeepTim) UARTWrite(BeepTim + '0');
0x0174	0x0831      	MOVF       _BeepTim, 0
0x0175	0x1903      	BTFSC      STATUS, 2
0x0176	0x297B      	GOTO       L_SendAT30
0x0177	0x3030      	MOVLW      48
0x0178	0x0731      	ADDWF      _BeepTim, 0
0x0179	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x017A	0x2756      	CALL       _UARTWrite
L_SendAT30:
;bfpHeadset.c,190 :: 		UARTWrite('5');
0x017B	0x3035      	MOVLW      53
0x017C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x017D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,191 :: 		}
L_SendAT27:
;bfpHeadset.c,193 :: 		if (AT_CMIC == cmd) {
0x017E	0x3012      	MOVLW      18
0x017F	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0180	0x1D03      	BTFSS      STATUS, 2
0x0181	0x29A8      	GOTO       L_SendAT31
;bfpHeadset.c,195 :: 		UARTWrite('M');
0x0182	0x304D      	MOVLW      77
0x0183	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0184	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,196 :: 		UARTWrite('I');
0x0185	0x3049      	MOVLW      73
0x0186	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0187	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,197 :: 		UARTWrite('C');
0x0188	0x3043      	MOVLW      67
0x0189	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x018A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,198 :: 		UARTWrite('=');
0x018B	0x303D      	MOVLW      61
0x018C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x018D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,199 :: 		UARTWrite('0');
0x018E	0x3030      	MOVLW      48
0x018F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0190	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,200 :: 		UARTWrite(',');
0x0191	0x302C      	MOVLW      44
0x0192	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0193	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,201 :: 		if (MicGain > 3) {
0x0194	0x0825      	MOVF       _MicGain, 0
0x0195	0x3C03      	SUBLW      3
0x0196	0x1803      	BTFSC      STATUS, 0
0x0197	0x29A2      	GOTO       L_SendAT32
;bfpHeadset.c,202 :: 		UARTWrite('1');
0x0198	0x3031      	MOVLW      49
0x0199	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x019A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,203 :: 		UARTWrite(MicGain - 4 + '0');
0x019B	0x3004      	MOVLW      4
0x019C	0x0225      	SUBWF      _MicGain, 0
0x019D	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x019E	0x3030      	MOVLW      48
0x019F	0x07BC      	ADDWF      FARG_UARTWrite_dt, 1
0x01A0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,204 :: 		} else
0x01A1	0x29A8      	GOTO       L_SendAT33
L_SendAT32:
;bfpHeadset.c,205 :: 		UARTWrite(MicGain + 6 + '0');
0x01A2	0x3006      	MOVLW      6
0x01A3	0x0725      	ADDWF      _MicGain, 0
0x01A4	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01A5	0x3030      	MOVLW      48
0x01A6	0x07BC      	ADDWF      FARG_UARTWrite_dt, 1
0x01A7	0x2756      	CALL       _UARTWrite
L_SendAT33:
;bfpHeadset.c,206 :: 		}
L_SendAT31:
;bfpHeadset.c,207 :: 		if ((AT_BTPOWEROFF <= cmd) && (AT_BTVolumeDown >= cmd)) {
0x01A8	0x301E      	MOVLW      30
0x01A9	0x0239      	SUBWF      FARG_SendAT_cmd, 0
0x01AA	0x1C03      	BTFSS      STATUS, 0
0x01AB	0x29B6      	GOTO       L_SendAT36
0x01AC	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x01AD	0x3C2E      	SUBLW      46
0x01AE	0x1C03      	BTFSS      STATUS, 0
0x01AF	0x29B6      	GOTO       L_SendAT36
L__SendAT221:
;bfpHeadset.c,208 :: 		UARTWrite('B');
0x01B0	0x3042      	MOVLW      66
0x01B1	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01B2	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,209 :: 		UARTWrite('T');
0x01B3	0x3054      	MOVLW      84
0x01B4	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01B5	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,210 :: 		}
L_SendAT36:
;bfpHeadset.c,211 :: 		if ((AT_BTPOWERON == cmd) || (AT_BTPOWEROFF == cmd)) {
0x01B6	0x301F      	MOVLW      31
0x01B7	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x01B8	0x1903      	BTFSC      STATUS, 2
0x01B9	0x29BF      	GOTO       L__SendAT220
0x01BA	0x301E      	MOVLW      30
0x01BB	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x01BC	0x1903      	BTFSC      STATUS, 2
0x01BD	0x29BF      	GOTO       L__SendAT220
0x01BE	0x29D7      	GOTO       L_SendAT39
L__SendAT220:
;bfpHeadset.c,214 :: 		UARTWrite('P');
0x01BF	0x3050      	MOVLW      80
0x01C0	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01C1	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,215 :: 		UARTWrite('O');
0x01C2	0x304F      	MOVLW      79
0x01C3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01C4	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,216 :: 		UARTWrite('W');
0x01C5	0x3057      	MOVLW      87
0x01C6	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01C7	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,217 :: 		UARTWrite('E');
0x01C8	0x3045      	MOVLW      69
0x01C9	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01CA	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,218 :: 		UARTWrite('R');
0x01CB	0x3052      	MOVLW      82
0x01CC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01CD	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,219 :: 		UARTWrite('=');
0x01CE	0x303D      	MOVLW      61
0x01CF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01D0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,220 :: 		UARTWrite('0' + cmd - AT_BTPOWEROFF);
0x01D1	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x01D2	0x3E30      	ADDLW      48
0x01D3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01D4	0x301E      	MOVLW      30
0x01D5	0x02BC      	SUBWF      FARG_UARTWrite_dt, 1
0x01D6	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,221 :: 		}
L_SendAT39:
;bfpHeadset.c,222 :: 		if (AT_BTName == cmd) {
0x01D7	0x3020      	MOVLW      32
0x01D8	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x01D9	0x1D03      	BTFSS      STATUS, 2
0x01DA	0x2A11      	GOTO       L_SendAT40
;bfpHeadset.c,225 :: 		UARTWrite('H');
0x01DB	0x3048      	MOVLW      72
0x01DC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01DD	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,226 :: 		UARTWrite('O');
0x01DE	0x304F      	MOVLW      79
0x01DF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01E0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,227 :: 		UARTWrite('S');
0x01E1	0x3053      	MOVLW      83
0x01E2	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01E3	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,228 :: 		UARTWrite('T');
0x01E4	0x3054      	MOVLW      84
0x01E5	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01E6	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,229 :: 		UARTWrite('=');
0x01E7	0x303D      	MOVLW      61
0x01E8	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01E9	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,230 :: 		UARTWrite('d');
0x01EA	0x3064      	MOVLW      100
0x01EB	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01EC	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,231 :: 		UARTWrite('i');
0x01ED	0x3069      	MOVLW      105
0x01EE	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01EF	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,232 :: 		UARTWrite('h');
0x01F0	0x3068      	MOVLW      104
0x01F1	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01F2	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,233 :: 		UARTWrite('a');
0x01F3	0x3061      	MOVLW      97
0x01F4	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01F5	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,234 :: 		UARTWrite('v');
0x01F6	0x3076      	MOVLW      118
0x01F7	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01F8	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,235 :: 		UARTWrite(' ');
0x01F9	0x3020      	MOVLW      32
0x01FA	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01FB	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,236 :: 		UARTWrite('H');
0x01FC	0x3048      	MOVLW      72
0x01FD	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x01FE	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,237 :: 		UARTWrite('e');
0x01FF	0x3065      	MOVLW      101
0x0200	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0201	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,238 :: 		UARTWrite('a');
0x0202	0x3061      	MOVLW      97
0x0203	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0204	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,239 :: 		UARTWrite('d');
0x0205	0x3064      	MOVLW      100
0x0206	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0207	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,240 :: 		UARTWrite('s');
0x0208	0x3073      	MOVLW      115
0x0209	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x020A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,241 :: 		UARTWrite('e');
0x020B	0x3065      	MOVLW      101
0x020C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x020D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,242 :: 		UARTWrite('t');
0x020E	0x3074      	MOVLW      116
0x020F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0210	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,243 :: 		}
L_SendAT40:
;bfpHeadset.c,244 :: 		if (AT_BTVIS == cmd) {
0x0211	0x3021      	MOVLW      33
0x0212	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0213	0x1D03      	BTFSS      STATUS, 2
0x0214	0x2A24      	GOTO       L_SendAT41
;bfpHeadset.c,247 :: 		UARTWrite('V');
0x0215	0x3056      	MOVLW      86
0x0216	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0217	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,248 :: 		UARTWrite('I');
0x0218	0x3049      	MOVLW      73
0x0219	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x021A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,249 :: 		UARTWrite('S');
0x021B	0x3053      	MOVLW      83
0x021C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x021D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,250 :: 		UARTWrite('=');
0x021E	0x303D      	MOVLW      61
0x021F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0220	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,251 :: 		UARTWrite('1');
0x0221	0x3031      	MOVLW      49
0x0222	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0223	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,252 :: 		}
L_SendAT41:
;bfpHeadset.c,253 :: 		if (AT_BTUNPAIR == cmd) {
0x0224	0x3022      	MOVLW      34
0x0225	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0226	0x1D03      	BTFSS      STATUS, 2
0x0227	0x2A40      	GOTO       L_SendAT42
;bfpHeadset.c,256 :: 		UARTWrite('U');
0x0228	0x3055      	MOVLW      85
0x0229	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x022A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,257 :: 		UARTWrite('N');
0x022B	0x304E      	MOVLW      78
0x022C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x022D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,258 :: 		UARTWrite('P');
0x022E	0x3050      	MOVLW      80
0x022F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0230	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,259 :: 		UARTWrite('A');
0x0231	0x3041      	MOVLW      65
0x0232	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0233	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,260 :: 		UARTWrite('I');
0x0234	0x3049      	MOVLW      73
0x0235	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0236	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,261 :: 		UARTWrite('R');
0x0237	0x3052      	MOVLW      82
0x0238	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0239	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,262 :: 		UARTWrite('=');
0x023A	0x303D      	MOVLW      61
0x023B	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x023C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,263 :: 		UARTWrite('0');
0x023D	0x3030      	MOVLW      48
0x023E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x023F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,264 :: 		}
L_SendAT42:
;bfpHeadset.c,265 :: 		if (AT_BTPAIRCFG == cmd) {
0x0240	0x3023      	MOVLW      35
0x0241	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0242	0x1D03      	BTFSS      STATUS, 2
0x0243	0x2A7A      	GOTO       L_SendAT43
;bfpHeadset.c,268 :: 		UARTWrite('P');
0x0244	0x3050      	MOVLW      80
0x0245	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0246	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,269 :: 		UARTWrite('A');
0x0247	0x3041      	MOVLW      65
0x0248	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0249	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,270 :: 		UARTWrite('I');
0x024A	0x3049      	MOVLW      73
0x024B	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x024C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,271 :: 		UARTWrite('R');
0x024D	0x3052      	MOVLW      82
0x024E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x024F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,272 :: 		UARTWrite('C');
0x0250	0x3043      	MOVLW      67
0x0251	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0252	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,273 :: 		UARTWrite('F');
0x0253	0x3046      	MOVLW      70
0x0254	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0255	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,274 :: 		UARTWrite('G');
0x0256	0x3047      	MOVLW      71
0x0257	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0258	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,275 :: 		UARTWrite('=');
0x0259	0x303D      	MOVLW      61
0x025A	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x025B	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,276 :: 		if (EEPROM_Read(BT_PAIRMODE_ADDR))
0x025C	0x300D      	MOVLW      13
0x025D	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x025E	0x27E9      	CALL       _EEPROM_Read
0x025F	0x0870      	MOVF       R0, 0
0x0260	0x1903      	BTFSC      STATUS, 2
0x0261	0x2A67      	GOTO       L_SendAT44
;bfpHeadset.c,277 :: 		UARTWrite('2');
0x0262	0x3032      	MOVLW      50
0x0263	0x1283      	BCF        STATUS, 5
0x0264	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0265	0x2756      	CALL       _UARTWrite
0x0266	0x2A7A      	GOTO       L_SendAT45
L_SendAT44:
0x0267	0x1283      	BCF        STATUS, 5
;bfpHeadset.c,279 :: 		UARTWrite('1');
0x0268	0x3031      	MOVLW      49
0x0269	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x026A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,280 :: 		UARTWrite(',');
0x026B	0x302C      	MOVLW      44
0x026C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x026D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,281 :: 		UARTWrite('9');
0x026E	0x3039      	MOVLW      57
0x026F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0270	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,282 :: 		UARTWrite('8');
0x0271	0x3038      	MOVLW      56
0x0272	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0273	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,283 :: 		UARTWrite('5');
0x0274	0x3035      	MOVLW      53
0x0275	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0276	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,284 :: 		UARTWrite('2');
0x0277	0x3032      	MOVLW      50
0x0278	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0279	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,285 :: 		}
L_SendAT45:
;bfpHeadset.c,286 :: 		}
L_SendAT43:
;bfpHeadset.c,287 :: 		if ((AT_BTStop <= cmd) && (AT_BTVolumeDown >= cmd)) {
0x027A	0x3028      	MOVLW      40
0x027B	0x0239      	SUBWF      FARG_SendAT_cmd, 0
0x027C	0x1C03      	BTFSS      STATUS, 0
0x027D	0x2A9D      	GOTO       L_SendAT48
0x027E	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x027F	0x3C2E      	SUBLW      46
0x0280	0x1C03      	BTFSS      STATUS, 0
0x0281	0x2A9D      	GOTO       L_SendAT48
L__SendAT219:
;bfpHeadset.c,290 :: 		UARTWrite('A');
0x0282	0x3041      	MOVLW      65
0x0283	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0284	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,291 :: 		UARTWrite('V');
0x0285	0x3056      	MOVLW      86
0x0286	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0287	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,292 :: 		UARTWrite('R');
0x0288	0x3052      	MOVLW      82
0x0289	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x028A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,293 :: 		UARTWrite('C');
0x028B	0x3043      	MOVLW      67
0x028C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x028D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,294 :: 		UARTWrite('O');
0x028E	0x304F      	MOVLW      79
0x028F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0290	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,295 :: 		UARTWrite('P');
0x0291	0x3050      	MOVLW      80
0x0292	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0293	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,296 :: 		UARTWrite('=');
0x0294	0x303D      	MOVLW      61
0x0295	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0296	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,297 :: 		UARTWrite('0' + cmd - AT_BTStop);
0x0297	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x0298	0x3E30      	ADDLW      48
0x0299	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x029A	0x3028      	MOVLW      40
0x029B	0x02BC      	SUBWF      FARG_UARTWrite_dt, 1
0x029C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,298 :: 		}
L_SendAT48:
;bfpHeadset.c,299 :: 		if (AT_BTATA == cmd) {
0x029D	0x3024      	MOVLW      36
0x029E	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x029F	0x1D03      	BTFSS      STATUS, 2
0x02A0	0x2AAA      	GOTO       L_SendAT49
;bfpHeadset.c,302 :: 		UARTWrite('A');
0x02A1	0x3041      	MOVLW      65
0x02A2	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02A3	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,303 :: 		UARTWrite('T');
0x02A4	0x3054      	MOVLW      84
0x02A5	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02A6	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,304 :: 		UARTWrite('A');
0x02A7	0x3041      	MOVLW      65
0x02A8	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02A9	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,305 :: 		}
L_SendAT49:
;bfpHeadset.c,306 :: 		if (AT_BTATH == cmd) {
0x02AA	0x3025      	MOVLW      37
0x02AB	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x02AC	0x1D03      	BTFSS      STATUS, 2
0x02AD	0x2AB7      	GOTO       L_SendAT50
;bfpHeadset.c,309 :: 		UARTWrite('A');
0x02AE	0x3041      	MOVLW      65
0x02AF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02B0	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,310 :: 		UARTWrite('T');
0x02B1	0x3054      	MOVLW      84
0x02B2	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02B3	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,311 :: 		UARTWrite('H');
0x02B4	0x3048      	MOVLW      72
0x02B5	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02B6	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,312 :: 		}
L_SendAT50:
;bfpHeadset.c,313 :: 		if ((AT_FMOPEN <= cmd) && (AT_FMFREQ >= cmd)) {
0x02B7	0x303C      	MOVLW      60
0x02B8	0x0239      	SUBWF      FARG_SendAT_cmd, 0
0x02B9	0x1C03      	BTFSS      STATUS, 0
0x02BA	0x2AC5      	GOTO       L_SendAT53
0x02BB	0x0839      	MOVF       FARG_SendAT_cmd, 0
0x02BC	0x3C3F      	SUBLW      63
0x02BD	0x1C03      	BTFSS      STATUS, 0
0x02BE	0x2AC5      	GOTO       L_SendAT53
L__SendAT218:
;bfpHeadset.c,314 :: 		UARTWrite('F');
0x02BF	0x3046      	MOVLW      70
0x02C0	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02C1	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,315 :: 		UARTWrite('M');
0x02C2	0x304D      	MOVLW      77
0x02C3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02C4	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,316 :: 		}
L_SendAT53:
;bfpHeadset.c,317 :: 		if (AT_FMOPEN == cmd) {
0x02C5	0x303C      	MOVLW      60
0x02C6	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x02C7	0x1D03      	BTFSS      STATUS, 2
0x02C8	0x2ADB      	GOTO       L_SendAT54
;bfpHeadset.c,320 :: 		UARTWrite('O');
0x02C9	0x304F      	MOVLW      79
0x02CA	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02CB	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,321 :: 		UARTWrite('P');
0x02CC	0x3050      	MOVLW      80
0x02CD	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02CE	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,322 :: 		UARTWrite('E');
0x02CF	0x3045      	MOVLW      69
0x02D0	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02D1	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,323 :: 		UARTWrite('N');
0x02D2	0x304E      	MOVLW      78
0x02D3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02D4	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,324 :: 		UARTWrite('=');
0x02D5	0x303D      	MOVLW      61
0x02D6	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02D7	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,325 :: 		UARTWrite('0');
0x02D8	0x3030      	MOVLW      48
0x02D9	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02DA	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,326 :: 		}
L_SendAT54:
;bfpHeadset.c,327 :: 		if (AT_FMCLOSE == cmd) {
0x02DB	0x303D      	MOVLW      61
0x02DC	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x02DD	0x1D03      	BTFSS      STATUS, 2
0x02DE	0x2AEE      	GOTO       L_SendAT55
;bfpHeadset.c,330 :: 		UARTWrite('C');
0x02DF	0x3043      	MOVLW      67
0x02E0	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02E1	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,331 :: 		UARTWrite('L');
0x02E2	0x304C      	MOVLW      76
0x02E3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02E4	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,332 :: 		UARTWrite('O');
0x02E5	0x304F      	MOVLW      79
0x02E6	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02E7	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,333 :: 		UARTWrite('S');
0x02E8	0x3053      	MOVLW      83
0x02E9	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02EA	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,334 :: 		UARTWrite('E');
0x02EB	0x3045      	MOVLW      69
0x02EC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02ED	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,335 :: 		}
L_SendAT55:
;bfpHeadset.c,336 :: 		if (AT_FMVOLUME == cmd) {
0x02EE	0x303E      	MOVLW      62
0x02EF	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x02F0	0x1D03      	BTFSS      STATUS, 2
0x02F1	0x2B0B      	GOTO       L_SendAT56
;bfpHeadset.c,339 :: 		UARTWrite('V');
0x02F2	0x3056      	MOVLW      86
0x02F3	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02F4	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,340 :: 		UARTWrite('O');
0x02F5	0x304F      	MOVLW      79
0x02F6	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02F7	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,341 :: 		UARTWrite('L');
0x02F8	0x304C      	MOVLW      76
0x02F9	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02FA	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,342 :: 		UARTWrite('U');
0x02FB	0x3055      	MOVLW      85
0x02FC	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x02FD	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,343 :: 		UARTWrite('M');
0x02FE	0x304D      	MOVLW      77
0x02FF	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0300	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,344 :: 		UARTWrite('E');
0x0301	0x3045      	MOVLW      69
0x0302	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0303	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,345 :: 		UARTWrite('=');
0x0304	0x303D      	MOVLW      61
0x0305	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0306	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,346 :: 		UARTWrite('0' + FMVolume);
0x0307	0x0828      	MOVF       _FMVolume, 0
0x0308	0x3E30      	ADDLW      48
0x0309	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x030A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,347 :: 		}
L_SendAT56:
;bfpHeadset.c,348 :: 		if (AT_FMFREQ == cmd) {
0x030B	0x303F      	MOVLW      63
0x030C	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x030D	0x1D03      	BTFSS      STATUS, 2
0x030E	0x2B50      	GOTO       L_SendAT57
;bfpHeadset.c,351 :: 		UARTWrite('F');
0x030F	0x3046      	MOVLW      70
0x0310	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0311	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,352 :: 		UARTWrite('R');
0x0312	0x3052      	MOVLW      82
0x0313	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0314	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,353 :: 		UARTWrite('E');
0x0315	0x3045      	MOVLW      69
0x0316	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0317	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,354 :: 		UARTWrite('Q');
0x0318	0x3051      	MOVLW      81
0x0319	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x031A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,355 :: 		UARTWrite('=');
0x031B	0x303D      	MOVLW      61
0x031C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x031D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,356 :: 		k = FMFreq;
0x031E	0x0823      	MOVF       _FMFreq, 0
0x031F	0x00BB      	MOVWF      SendAT_k_L0
;bfpHeadset.c,357 :: 		if (FMFreq < 25) {
0x0320	0x3019      	MOVLW      25
0x0321	0x0223      	SUBWF      _FMFreq, 0
0x0322	0x1803      	BTFSC      STATUS, 0
0x0323	0x2B2A      	GOTO       L_SendAT58
;bfpHeadset.c,358 :: 		UARTWrite('8');
0x0324	0x3038      	MOVLW      56
0x0325	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0326	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,359 :: 		k += 75;
0x0327	0x304B      	MOVLW      75
0x0328	0x07BB      	ADDWF      SendAT_k_L0, 1
;bfpHeadset.c,360 :: 		} else if (FMFreq < 125) {
0x0329	0x2B3C      	GOTO       L_SendAT59
L_SendAT58:
0x032A	0x307D      	MOVLW      125
0x032B	0x0223      	SUBWF      _FMFreq, 0
0x032C	0x1803      	BTFSC      STATUS, 0
0x032D	0x2B34      	GOTO       L_SendAT60
;bfpHeadset.c,361 :: 		UARTWrite('9');
0x032E	0x3039      	MOVLW      57
0x032F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0330	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,362 :: 		k -= 25;
0x0331	0x3019      	MOVLW      25
0x0332	0x02BB      	SUBWF      SendAT_k_L0, 1
;bfpHeadset.c,363 :: 		} else {
0x0333	0x2B3C      	GOTO       L_SendAT61
L_SendAT60:
;bfpHeadset.c,364 :: 		UARTWrite('1');
0x0334	0x3031      	MOVLW      49
0x0335	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0336	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,365 :: 		UARTWrite('0');
0x0337	0x3030      	MOVLW      48
0x0338	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0339	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,366 :: 		k -= 125;
0x033A	0x307D      	MOVLW      125
0x033B	0x02BB      	SUBWF      SendAT_k_L0, 1
;bfpHeadset.c,367 :: 		}
L_SendAT61:
L_SendAT59:
;bfpHeadset.c,368 :: 		UARTWrite('0' + k / 10);
0x033C	0x300A      	MOVLW      10
0x033D	0x00F4      	MOVWF      R4
0x033E	0x083B      	MOVF       SendAT_k_L0, 0
0x033F	0x00F0      	MOVWF      R0
0x0340	0x27D8      	CALL       _Div_8x8_U
0x0341	0x0870      	MOVF       R0, 0
0x0342	0x3E30      	ADDLW      48
0x0343	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0344	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,369 :: 		UARTWrite('0' + k % 10);
0x0345	0x300A      	MOVLW      10
0x0346	0x00F4      	MOVWF      R4
0x0347	0x083B      	MOVF       SendAT_k_L0, 0
0x0348	0x00F0      	MOVWF      R0
0x0349	0x27D8      	CALL       _Div_8x8_U
0x034A	0x0878      	MOVF       R8, 0
0x034B	0x00F0      	MOVWF      R0
0x034C	0x0870      	MOVF       R0, 0
0x034D	0x3E30      	ADDLW      48
0x034E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x034F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,370 :: 		}
L_SendAT57:
;bfpHeadset.c,371 :: 		if (AT_Beep == cmd) {
0x0350	0x3046      	MOVLW      70
0x0351	0x0639      	XORWF      FARG_SendAT_cmd, 0
0x0352	0x1D03      	BTFSS      STATUS, 2
0x0353	0x2BA0      	GOTO       L_SendAT62
;bfpHeadset.c,372 :: 		UARTWrite('S');
0x0354	0x3053      	MOVLW      83
0x0355	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0356	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,373 :: 		UARTWrite('I');
0x0357	0x3049      	MOVLW      73
0x0358	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0359	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,374 :: 		UARTWrite('M');
0x035A	0x304D      	MOVLW      77
0x035B	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x035C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,375 :: 		UARTWrite('T');
0x035D	0x3054      	MOVLW      84
0x035E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x035F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,376 :: 		UARTWrite('O');
0x0360	0x304F      	MOVLW      79
0x0361	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0362	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,377 :: 		UARTWrite('N');
0x0363	0x304E      	MOVLW      78
0x0364	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0365	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,378 :: 		UARTWrite('E');
0x0366	0x3045      	MOVLW      69
0x0367	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0368	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,379 :: 		UARTWrite('=');
0x0369	0x303D      	MOVLW      61
0x036A	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x036B	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,380 :: 		UARTWrite('1');
0x036C	0x3031      	MOVLW      49
0x036D	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x036E	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,381 :: 		UARTWrite(',');
0x036F	0x302C      	MOVLW      44
0x0370	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0371	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,382 :: 		UARTWrite('2');
0x0372	0x3032      	MOVLW      50
0x0373	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0374	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,383 :: 		UARTWrite('5');
0x0375	0x3035      	MOVLW      53
0x0376	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0377	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,384 :: 		UARTWrite('0');
0x0378	0x3030      	MOVLW      48
0x0379	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x037A	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,385 :: 		UARTWrite('0');
0x037B	0x3030      	MOVLW      48
0x037C	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x037D	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,386 :: 		UARTWrite(',');
0x037E	0x302C      	MOVLW      44
0x037F	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0380	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,387 :: 		UARTWrite('2');
0x0381	0x3032      	MOVLW      50
0x0382	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0383	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,388 :: 		UARTWrite('0');
0x0384	0x3030      	MOVLW      48
0x0385	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0386	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,389 :: 		UARTWrite('0');
0x0387	0x3030      	MOVLW      48
0x0388	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0389	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,390 :: 		UARTWrite(',');
0x038A	0x302C      	MOVLW      44
0x038B	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x038C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,391 :: 		UARTWrite('0');
0x038D	0x3030      	MOVLW      48
0x038E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x038F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,392 :: 		UARTWrite(',');
0x0390	0x302C      	MOVLW      44
0x0391	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0392	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,393 :: 		if (BeepTim) UARTWrite(BeepTim + '0');
0x0393	0x0831      	MOVF       _BeepTim, 0
0x0394	0x1903      	BTFSC      STATUS, 2
0x0395	0x2B9A      	GOTO       L_SendAT63
0x0396	0x3030      	MOVLW      48
0x0397	0x0731      	ADDWF      _BeepTim, 0
0x0398	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x0399	0x2756      	CALL       _UARTWrite
L_SendAT63:
;bfpHeadset.c,394 :: 		UARTWrite('5');
0x039A	0x3035      	MOVLW      53
0x039B	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x039C	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,395 :: 		UARTWrite('0');
0x039D	0x3030      	MOVLW      48
0x039E	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x039F	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,396 :: 		}
L_SendAT62:
;bfpHeadset.c,397 :: 		UARTWrite(10);
0x03A0	0x300A      	MOVLW      10
0x03A1	0x00BC      	MOVWF      FARG_UARTWrite_dt
0x03A2	0x2756      	CALL       _UARTWrite
;bfpHeadset.c,398 :: 		GPIE_bit = 0b1;
0x03A3	0x158B      	BSF        GPIE_bit, BitPos(GPIE_bit+0)
;bfpHeadset.c,399 :: 		if (wait200) delay_ms(500); else delay_ms(200);
0x03A4	0x083A      	MOVF       FARG_SendAT_wait200, 0
0x03A5	0x1903      	BTFSC      STATUS, 2
0x03A6	0x2BB6      	GOTO       L_SendAT64
0x03A7	0x3003      	MOVLW      3
0x03A8	0x00FB      	MOVWF      R11
0x03A9	0x308A      	MOVLW      138
0x03AA	0x00FC      	MOVWF      R12
0x03AB	0x3055      	MOVLW      85
0x03AC	0x00FD      	MOVWF      R13
L_SendAT65:
0x03AD	0x0BFD      	DECFSZ     R13, 1
0x03AE	0x2BAD      	GOTO       L_SendAT65
0x03AF	0x0BFC      	DECFSZ     R12, 1
0x03B0	0x2BAD      	GOTO       L_SendAT65
0x03B1	0x0BFB      	DECFSZ     R11, 1
0x03B2	0x2BAD      	GOTO       L_SendAT65
0x03B3	0x0000      	NOP
0x03B4	0x0000      	NOP
0x03B5	0x2BC3      	GOTO       L_SendAT66
L_SendAT64:
0x03B6	0x3002      	MOVLW      2
0x03B7	0x00FB      	MOVWF      R11
0x03B8	0x3004      	MOVLW      4
0x03B9	0x00FC      	MOVWF      R12
0x03BA	0x30BA      	MOVLW      186
0x03BB	0x00FD      	MOVWF      R13
L_SendAT67:
0x03BC	0x0BFD      	DECFSZ     R13, 1
0x03BD	0x2BBC      	GOTO       L_SendAT67
0x03BE	0x0BFC      	DECFSZ     R12, 1
0x03BF	0x2BBC      	GOTO       L_SendAT67
0x03C0	0x0BFB      	DECFSZ     R11, 1
0x03C1	0x2BBC      	GOTO       L_SendAT67
0x03C2	0x0000      	NOP
L_SendAT66:
;bfpHeadset.c,400 :: 		}
L_end_SendAT:
0x03C3	0x0008      	RETURN
; end of _SendAT
_main:
;bfpHeadset.c,579 :: 		void main() {
;bfpHeadset.c,580 :: 		TRISIO = 0b111100;       // rotary encoder pins and reset button input, others output
0x03C4	0x303C      	MOVLW      60
0x03C5	0x1683      	BSF        STATUS, 5
0x03C6	0x0085      	MOVWF      TRISIO
;bfpHeadset.c,581 :: 		GPIO = 0b000011;         // high the TX pin and SIM800 power pin
0x03C7	0x3003      	MOVLW      3
0x03C8	0x1283      	BCF        STATUS, 5
0x03C9	0x0085      	MOVWF      GPIO
;bfpHeadset.c,582 :: 		ANSEL = 0;               // all pins digital
0x03CA	0x1683      	BSF        STATUS, 5
0x03CB	0x019F      	CLRF       ANSEL
;bfpHeadset.c,583 :: 		IOC = 0b110000;          // interrupt on rotate
0x03CC	0x3030      	MOVLW      48
0x03CD	0x0096      	MOVWF      IOC
;bfpHeadset.c,584 :: 		CMCON0 = 7;              // turn off comparator
0x03CE	0x3007      	MOVLW      7
0x03CF	0x1283      	BCF        STATUS, 5
0x03D0	0x0099      	MOVWF      CMCON0
;bfpHeadset.c,585 :: 		OPTION_REG = 0b10010111; // INT on falling edge, Timer0 internal clock source and 1:256 prescaler
0x03D1	0x3097      	MOVLW      151
0x03D2	0x1683      	BSF        STATUS, 5
0x03D3	0x0081      	MOVWF      OPTION_REG
;bfpHeadset.c,586 :: 		INTCON = 0b00011000;     // rotary encoder push and GPIO change interrupt
0x03D4	0x3018      	MOVLW      24
0x03D5	0x008B      	MOVWF      INTCON
;bfpHeadset.c,588 :: 		Power = 0b0;
0x03D6	0x1283      	BCF        STATUS, 5
0x03D7	0x132A      	BCF        _Power, BitPos(_Power+0)
;bfpHeadset.c,589 :: 		RotateAct = ACT_NONE;
0x03D8	0x3064      	MOVLW      100
0x03D9	0x00AD      	MOVWF      _RotateAct
;bfpHeadset.c,590 :: 		NoActivity = 0;
0x03DA	0x01AB      	CLRF       _NoActivity
;bfpHeadset.c,591 :: 		PushedNoRotate = 0b0;
0x03DB	0x122A      	BCF        _PushedNoRotate, BitPos(_PushedNoRotate+0)
;bfpHeadset.c,592 :: 		LastClk = RotClk;
0x03DC	0x1A05      	BTFSC      GP4_bit, BitPos(GP4_bit+0)
0x03DD	0x2BE0      	GOTO       L__main257
0x03DE	0x11AA      	BCF        _LastClk, BitPos(_LastClk+0)
0x03DF	0x2BE1      	GOTO       L__main258
L__main257:
0x03E0	0x15AA      	BSF        _LastClk, BitPos(_LastClk+0)
L__main258:
;bfpHeadset.c,593 :: 		LastDat = RotDat;
0x03E1	0x1A85      	BTFSC      GP5_bit, BitPos(GP5_bit+0)
0x03E2	0x2BE5      	GOTO       L__main259
0x03E3	0x10AA      	BCF        _LastDat, BitPos(_LastDat+0)
0x03E4	0x2BE6      	GOTO       L__main260
L__main259:
0x03E5	0x14AA      	BSF        _LastDat, BitPos(_LastDat+0)
L__main260:
;bfpHeadset.c,594 :: 		LastPush = 0b0;
0x03E6	0x12AA      	BCF        _LastPush, BitPos(_LastPush+0)
;bfpHeadset.c,595 :: 		RotHasPushed = 0b0;
0x03E7	0x102A      	BCF        _RotHasPushed, BitPos(_RotHasPushed+0)
;bfpHeadset.c,596 :: 		Seq = 0;
0x03E8	0x01A4      	CLRF       _Seq
;bfpHeadset.c,597 :: 		ConfigMode = 0;
0x03E9	0x01B4      	CLRF       _ConfigMode
;bfpHeadset.c,600 :: 		if ((STATUS.B4) && (!STATUS.B3)) {
0x03EA	0x1E03      	BTFSS      STATUS, 4
0x03EB	0x2C10      	GOTO       L_main137
0x03EC	0x1983      	BTFSC      STATUS, 3
0x03ED	0x2C10      	GOTO       L_main137
L__main234:
;bfpHeadset.c,601 :: 		EEPROM_Write(RECONFIG_ADDR, 255);
0x03EE	0x300C      	MOVLW      12
0x03EF	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x03F0	0x30FF      	MOVLW      255
0x03F1	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x03F2	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,602 :: 		Delay_ms(1000);
0x03F3	0x3006      	MOVLW      6
0x03F4	0x00FB      	MOVWF      R11
0x03F5	0x3013      	MOVLW      19
0x03F6	0x00FC      	MOVWF      R12
0x03F7	0x30AD      	MOVLW      173
0x03F8	0x00FD      	MOVWF      R13
L_main138:
0x03F9	0x0BFD      	DECFSZ     R13, 1
0x03FA	0x2BF9      	GOTO       L_main138
0x03FB	0x0BFC      	DECFSZ     R12, 1
0x03FC	0x2BF9      	GOTO       L_main138
0x03FD	0x0BFB      	DECFSZ     R11, 1
0x03FE	0x2BF9      	GOTO       L_main138
0x03FF	0x0000      	NOP
0x0400	0x0000      	NOP
;bfpHeadset.c,603 :: 		BTMode = 0b1;
0x0401	0x1283      	BCF        STATUS, 5
0x0402	0x17AA      	BSF        _BTMode, BitPos(_BTMode+0)
;bfpHeadset.c,604 :: 		SendAT(AT_AT, 1);
0x0403	0x01B9      	CLRF       FARG_SendAT_cmd
0x0404	0x3001      	MOVLW      1
0x0405	0x00BA      	MOVWF      FARG_SendAT_wait200
0x0406	0x208D      	CALL       _SendAT
;bfpHeadset.c,605 :: 		SendAT(AT_AT, 1);
0x0407	0x01B9      	CLRF       FARG_SendAT_cmd
0x0408	0x3001      	MOVLW      1
0x0409	0x00BA      	MOVWF      FARG_SendAT_wait200
0x040A	0x208D      	CALL       _SendAT
;bfpHeadset.c,606 :: 		SendAT(AT_AT, 1);
0x040B	0x01B9      	CLRF       FARG_SendAT_cmd
0x040C	0x3001      	MOVLW      1
0x040D	0x00BA      	MOVWF      FARG_SendAT_wait200
0x040E	0x208D      	CALL       _SendAT
;bfpHeadset.c,607 :: 		TurnOff();
0x040F	0x26BA      	CALL       _TurnOff
;bfpHeadset.c,608 :: 		}
L_main137:
;bfpHeadset.c,609 :: 		EEADR = EEPROM_DUMMY_ADDR;
0x0410	0x30FA      	MOVLW      250
0x0411	0x1683      	BSF        STATUS, 5
0x0412	0x009B      	MOVWF      EEADR
;bfpHeadset.c,611 :: 		GIE_bit = 0b1;
0x0413	0x178B      	BSF        GIE_bit, BitPos(GIE_bit+0)
;bfpHeadset.c,612 :: 		while (1) {
L_main139:
;bfpHeadset.c,613 :: 		if (Power) {
0x0414	0x1283      	BCF        STATUS, 5
0x0415	0x1F2A      	BTFSS      _Power, BitPos(_Power+0)
0x0416	0x2D90      	GOTO       L_main141
;bfpHeadset.c,614 :: 		if ((RotHasPushed) && (!LastPush)) PushedNoRotate = 0b1;
0x0417	0x1C2A      	BTFSS      _RotHasPushed, BitPos(_RotHasPushed+0)
0x0418	0x2C1C      	GOTO       L_main144
0x0419	0x1AAA      	BTFSC      _LastPush, BitPos(_LastPush+0)
0x041A	0x2C1C      	GOTO       L_main144
L__main233:
0x041B	0x162A      	BSF        _PushedNoRotate, BitPos(_PushedNoRotate+0)
L_main144:
;bfpHeadset.c,615 :: 		if ((!RotHasPushed) && (PushedNoRotate) && (LastPush)) {
0x041C	0x182A      	BTFSC      _RotHasPushed, BitPos(_RotHasPushed+0)
0x041D	0x2C87      	GOTO       L_main147
0x041E	0x1E2A      	BTFSS      _PushedNoRotate, BitPos(_PushedNoRotate+0)
0x041F	0x2C87      	GOTO       L_main147
0x0420	0x1EAA      	BTFSS      _LastPush, BitPos(_LastPush+0)
0x0421	0x2C87      	GOTO       L_main147
L__main232:
;bfpHeadset.c,616 :: 		if (ConfigMode.B7) {
0x0422	0x1FB4      	BTFSS      _ConfigMode, 7
0x0423	0x2C75      	GOTO       L_main148
;bfpHeadset.c,617 :: 		if (CONFMOD_RINGTONE == ConfigMode) {
0x0424	0x3083      	MOVLW      131
0x0425	0x0634      	XORWF      _ConfigMode, 0
0x0426	0x1D03      	BTFSS      STATUS, 2
0x0427	0x2C2C      	GOTO       L_main149
;bfpHeadset.c,618 :: 		SendAT(AT_Save, 0);
0x0428	0x3003      	MOVLW      3
0x0429	0x00B9      	MOVWF      FARG_SendAT_cmd
0x042A	0x01BA      	CLRF       FARG_SendAT_wait200
0x042B	0x208D      	CALL       _SendAT
;bfpHeadset.c,619 :: 		}
L_main149:
;bfpHeadset.c,620 :: 		ConfigMode++;
0x042C	0x0A34      	INCF       _ConfigMode, 0
0x042D	0x00F0      	MOVWF      R0
0x042E	0x0870      	MOVF       R0, 0
0x042F	0x00B4      	MOVWF      _ConfigMode
;bfpHeadset.c,621 :: 		if (CONFMOD_LASTITEM + 1 == ConfigMode) {
0x0430	0x3085      	MOVLW      133
0x0431	0x0634      	XORWF      _ConfigMode, 0
0x0432	0x1D03      	BTFSS      STATUS, 2
0x0433	0x2C73      	GOTO       L_main150
;bfpHeadset.c,622 :: 		ConfigMode = 0;
0x0434	0x01B4      	CLRF       _ConfigMode
;bfpHeadset.c,623 :: 		if (EEPROM_Read(BT_PAIRMODE_ADDR) != BTPairMode) {
0x0435	0x300D      	MOVLW      13
0x0436	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x0437	0x27E9      	CALL       _EEPROM_Read
0x0438	0x0870      	MOVF       R0, 0
0x0439	0x1283      	BCF        STATUS, 5
0x043A	0x062E      	XORWF      _BTPairMode, 0
0x043B	0x1903      	BTFSC      STATUS, 2
0x043C	0x2C4C      	GOTO       L_main151
;bfpHeadset.c,624 :: 		asm NOP;
0x043D	0x0000      	NOP
;bfpHeadset.c,625 :: 		asm NOP;
0x043E	0x0000      	NOP
;bfpHeadset.c,626 :: 		EEPROM_Write(RECONFIG_ADDR, 255);
0x043F	0x300C      	MOVLW      12
0x0440	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x0441	0x30FF      	MOVLW      255
0x0442	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x0443	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,627 :: 		asm NOP;
0x0444	0x0000      	NOP
;bfpHeadset.c,628 :: 		asm NOP;
0x0445	0x0000      	NOP
;bfpHeadset.c,629 :: 		EEPROM_Write(BT_PAIRMODE_ADDR, BTPairMode);
0x0446	0x300D      	MOVLW      13
0x0447	0x1283      	BCF        STATUS, 5
0x0448	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x0449	0x082E      	MOVF       _BTPairMode, 0
0x044A	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x044B	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,630 :: 		}
L_main151:
;bfpHeadset.c,631 :: 		EEPROM_Write(SPKVOL_ADDR, SpeakerVolume);
0x044C	0x3011      	MOVLW      17
0x044D	0x1283      	BCF        STATUS, 5
0x044E	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x044F	0x0826      	MOVF       _SpeakerVolume, 0
0x0450	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x0451	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,632 :: 		asm NOP;
0x0452	0x0000      	NOP
;bfpHeadset.c,633 :: 		asm NOP;
0x0453	0x0000      	NOP
;bfpHeadset.c,634 :: 		EEPROM_Write(MICGAIN_ADDR, MicGain);
0x0454	0x3010      	MOVLW      16
0x0455	0x1283      	BCF        STATUS, 5
0x0456	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x0457	0x0825      	MOVF       _MicGain, 0
0x0458	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x0459	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,635 :: 		asm NOP;
0x045A	0x0000      	NOP
;bfpHeadset.c,636 :: 		asm NOP;
0x045B	0x0000      	NOP
;bfpHeadset.c,637 :: 		EEPROM_Write(RINGTONE_ADDR, RingTone);
0x045C	0x300E      	MOVLW      14
0x045D	0x1283      	BCF        STATUS, 5
0x045E	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x045F	0x0829      	MOVF       _RingTone, 0
0x0460	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x0461	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,638 :: 		asm NOP;
0x0462	0x0000      	NOP
;bfpHeadset.c,639 :: 		asm NOP;
0x0463	0x0000      	NOP
;bfpHeadset.c,640 :: 		EEPROM_Write(RINGERLEVEL_ADDR, RingerLevel);
0x0464	0x300F      	MOVLW      15
0x0465	0x1283      	BCF        STATUS, 5
0x0466	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x0467	0x0827      	MOVF       _RingerLevel, 0
0x0468	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x0469	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,641 :: 		asm NOP;
0x046A	0x0000      	NOP
;bfpHeadset.c,642 :: 		asm NOP;
0x046B	0x0000      	NOP
;bfpHeadset.c,643 :: 		BTMode = 0b1;
0x046C	0x1283      	BCF        STATUS, 5
0x046D	0x17AA      	BSF        _BTMode, BitPos(_BTMode+0)
;bfpHeadset.c,644 :: 		EEADR = EEPROM_DUMMY_ADDR;
0x046E	0x30FA      	MOVLW      250
0x046F	0x1683      	BSF        STATUS, 5
0x0470	0x009B      	MOVWF      EEADR
;bfpHeadset.c,645 :: 		TurnOff();
0x0471	0x26BA      	CALL       _TurnOff
;bfpHeadset.c,646 :: 		} else
0x0472	0x2C74      	GOTO       L_main152
L_main150:
;bfpHeadset.c,647 :: 		PresentConfigVal();
0x0473	0x2715      	CALL       _PresentConfigVal
L_main152:
;bfpHeadset.c,648 :: 		} else if (BTMode) {
0x0474	0x2C87      	GOTO       L_main153
L_main148:
0x0475	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x0476	0x2C85      	GOTO       L_main154
;bfpHeadset.c,649 :: 		if (BTIsPlaying) SendAT(AT_BTPause, 0); else SendAT(AT_BTPlay, 0);
0x0477	0x1C2C      	BTFSS      _BTIsPlaying, BitPos(_BTIsPlaying+0)
0x0478	0x2C7E      	GOTO       L_main155
0x0479	0x302A      	MOVLW      42
0x047A	0x00B9      	MOVWF      FARG_SendAT_cmd
0x047B	0x01BA      	CLRF       FARG_SendAT_wait200
0x047C	0x208D      	CALL       _SendAT
0x047D	0x2C82      	GOTO       L_main156
L_main155:
0x047E	0x3029      	MOVLW      41
0x047F	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0480	0x01BA      	CLRF       FARG_SendAT_wait200
0x0481	0x208D      	CALL       _SendAT
L_main156:
;bfpHeadset.c,650 :: 		BTIsPlaying = !BTIsPlaying;
0x0482	0x3001      	MOVLW      1
0x0483	0x06AC      	XORWF      _BTIsPlaying, 1
;bfpHeadset.c,651 :: 		} else
0x0484	0x2C87      	GOTO       L_main157
L_main154:
;bfpHeadset.c,652 :: 		FMFreqChangeMode = !FMFreqChangeMode;
0x0485	0x3004      	MOVLW      4
0x0486	0x06AA      	XORWF      _FMFreqChangeMode, 1
L_main157:
L_main153:
;bfpHeadset.c,653 :: 		}
L_main147:
;bfpHeadset.c,654 :: 		if ((!RotPush) && (PushedNoRotate) && (!NoActivity)) TurnOff();
0x0487	0x1905      	BTFSC      GP2_bit, BitPos(GP2_bit+0)
0x0488	0x2C8F      	GOTO       L_main160
0x0489	0x1E2A      	BTFSS      _PushedNoRotate, BitPos(_PushedNoRotate+0)
0x048A	0x2C8F      	GOTO       L_main160
0x048B	0x082B      	MOVF       _NoActivity, 0
0x048C	0x1D03      	BTFSS      STATUS, 2
0x048D	0x2C8F      	GOTO       L_main160
L__main231:
0x048E	0x26BA      	CALL       _TurnOff
L_main160:
;bfpHeadset.c,655 :: 		if (RotateAct < 10) {
0x048F	0x300A      	MOVLW      10
0x0490	0x022D      	SUBWF      _RotateAct, 0
0x0491	0x1803      	BTFSC      STATUS, 0
0x0492	0x2D7F      	GOTO       L_main161
;bfpHeadset.c,656 :: 		if (RotateAct > ACT_DOWN_DEC) {
0x0493	0x082D      	MOVF       _RotateAct, 0
0x0494	0x3C01      	SUBLW      1
0x0495	0x1803      	BTFSC      STATUS, 0
0x0496	0x2D3E      	GOTO       L_main162
;bfpHeadset.c,657 :: 		if (ConfigMode.B7) {
0x0497	0x1FB4      	BTFSS      _ConfigMode, 7
0x0498	0x2CFE      	GOTO       L_main163
;bfpHeadset.c,658 :: 		if (CONFMOD_BTPAIRING == ConfigMode) {
0x0499	0x3080      	MOVLW      128
0x049A	0x0634      	XORWF      _ConfigMode, 0
0x049B	0x1D03      	BTFSS      STATUS, 2
0x049C	0x2CA3      	GOTO       L_main164
;bfpHeadset.c,659 :: 		BTPairMode++;
0x049D	0x0AAE      	INCF       _BTPairMode, 1
;bfpHeadset.c,660 :: 		if (BTPairMode > 1) BTPairMode = 0;
0x049E	0x082E      	MOVF       _BTPairMode, 0
0x049F	0x3C01      	SUBLW      1
0x04A0	0x1803      	BTFSC      STATUS, 0
0x04A1	0x2CA3      	GOTO       L_main165
0x04A2	0x01AE      	CLRF       _BTPairMode
L_main165:
;bfpHeadset.c,661 :: 		}
L_main164:
;bfpHeadset.c,662 :: 		if (CONFMOD_SPKVOL == ConfigMode) {
0x04A3	0x3081      	MOVLW      129
0x04A4	0x0634      	XORWF      _ConfigMode, 0
0x04A5	0x1D03      	BTFSS      STATUS, 2
0x04A6	0x2CB9      	GOTO       L_main166
;bfpHeadset.c,663 :: 		if (ACT_DEC == RotateAct) SpeakerVolume--; else SpeakerVolume++;
0x04A7	0x3003      	MOVLW      3
0x04A8	0x062D      	XORWF      _RotateAct, 0
0x04A9	0x1D03      	BTFSS      STATUS, 2
0x04AA	0x2CAD      	GOTO       L_main167
0x04AB	0x03A6      	DECF       _SpeakerVolume, 1
0x04AC	0x2CAE      	GOTO       L_main168
L_main167:
0x04AD	0x0AA6      	INCF       _SpeakerVolume, 1
L_main168:
;bfpHeadset.c,664 :: 		if (255 == SpeakerVolume) SpeakerVolume = 0;
0x04AE	0x30FF      	MOVLW      255
0x04AF	0x0626      	XORWF      _SpeakerVolume, 0
0x04B0	0x1D03      	BTFSS      STATUS, 2
0x04B1	0x2CB3      	GOTO       L_main169
0x04B2	0x01A6      	CLRF       _SpeakerVolume
L_main169:
;bfpHeadset.c,665 :: 		if (10 == SpeakerVolume) SpeakerVolume = 9;
0x04B3	0x300A      	MOVLW      10
0x04B4	0x0626      	XORWF      _SpeakerVolume, 0
0x04B5	0x1D03      	BTFSS      STATUS, 2
0x04B6	0x2CB9      	GOTO       L_main170
0x04B7	0x3009      	MOVLW      9
0x04B8	0x00A6      	MOVWF      _SpeakerVolume
L_main170:
;bfpHeadset.c,666 :: 		}
L_main166:
;bfpHeadset.c,667 :: 		if (CONFMOD_MICGAIN == ConfigMode) {
0x04B9	0x3082      	MOVLW      130
0x04BA	0x0634      	XORWF      _ConfigMode, 0
0x04BB	0x1D03      	BTFSS      STATUS, 2
0x04BC	0x2CCF      	GOTO       L_main171
;bfpHeadset.c,668 :: 		if (ACT_DEC == RotateAct) MicGain--; else MicGain++;
0x04BD	0x3003      	MOVLW      3
0x04BE	0x062D      	XORWF      _RotateAct, 0
0x04BF	0x1D03      	BTFSS      STATUS, 2
0x04C0	0x2CC3      	GOTO       L_main172
0x04C1	0x03A5      	DECF       _MicGain, 1
0x04C2	0x2CC4      	GOTO       L_main173
L_main172:
0x04C3	0x0AA5      	INCF       _MicGain, 1
L_main173:
;bfpHeadset.c,669 :: 		if (255 == MicGain) MicGain = 0;
0x04C4	0x30FF      	MOVLW      255
0x04C5	0x0625      	XORWF      _MicGain, 0
0x04C6	0x1D03      	BTFSS      STATUS, 2
0x04C7	0x2CC9      	GOTO       L_main174
0x04C8	0x01A5      	CLRF       _MicGain
L_main174:
;bfpHeadset.c,670 :: 		if (10 == MicGain) MicGain = 9;
0x04C9	0x300A      	MOVLW      10
0x04CA	0x0625      	XORWF      _MicGain, 0
0x04CB	0x1D03      	BTFSS      STATUS, 2
0x04CC	0x2CCF      	GOTO       L_main175
0x04CD	0x3009      	MOVLW      9
0x04CE	0x00A5      	MOVWF      _MicGain
L_main175:
;bfpHeadset.c,671 :: 		}
L_main171:
;bfpHeadset.c,672 :: 		if (CONFMOD_RINGTONE == ConfigMode) {
0x04CF	0x3083      	MOVLW      131
0x04D0	0x0634      	XORWF      _ConfigMode, 0
0x04D1	0x1D03      	BTFSS      STATUS, 2
0x04D2	0x2CE6      	GOTO       L_main176
;bfpHeadset.c,673 :: 		if (ACT_DEC == RotateAct) RingTone--; else RingTone++;
0x04D3	0x3003      	MOVLW      3
0x04D4	0x062D      	XORWF      _RotateAct, 0
0x04D5	0x1D03      	BTFSS      STATUS, 2
0x04D6	0x2CD9      	GOTO       L_main177
0x04D7	0x03A9      	DECF       _RingTone, 1
0x04D8	0x2CDA      	GOTO       L_main178
L_main177:
0x04D9	0x0AA9      	INCF       _RingTone, 1
L_main178:
;bfpHeadset.c,674 :: 		if (0 == RingTone) RingTone = 19;
0x04DA	0x3000      	MOVLW      0
0x04DB	0x0629      	XORWF      _RingTone, 0
0x04DC	0x1D03      	BTFSS      STATUS, 2
0x04DD	0x2CE0      	GOTO       L_main179
0x04DE	0x3013      	MOVLW      19
0x04DF	0x00A9      	MOVWF      _RingTone
L_main179:
;bfpHeadset.c,675 :: 		if (20 == RingTone) RingTone = 1;
0x04E0	0x3014      	MOVLW      20
0x04E1	0x0629      	XORWF      _RingTone, 0
0x04E2	0x1D03      	BTFSS      STATUS, 2
0x04E3	0x2CE6      	GOTO       L_main180
0x04E4	0x3001      	MOVLW      1
0x04E5	0x00A9      	MOVWF      _RingTone
L_main180:
;bfpHeadset.c,676 :: 		}
L_main176:
;bfpHeadset.c,677 :: 		if (CONFMOD_RINGVOL == ConfigMode) {
0x04E6	0x3084      	MOVLW      132
0x04E7	0x0634      	XORWF      _ConfigMode, 0
0x04E8	0x1D03      	BTFSS      STATUS, 2
0x04E9	0x2CFC      	GOTO       L_main181
;bfpHeadset.c,678 :: 		if (ACT_DEC == RotateAct) RingerLevel--; else RingerLevel++;
0x04EA	0x3003      	MOVLW      3
0x04EB	0x062D      	XORWF      _RotateAct, 0
0x04EC	0x1D03      	BTFSS      STATUS, 2
0x04ED	0x2CF0      	GOTO       L_main182
0x04EE	0x03A7      	DECF       _RingerLevel, 1
0x04EF	0x2CF1      	GOTO       L_main183
L_main182:
0x04F0	0x0AA7      	INCF       _RingerLevel, 1
L_main183:
;bfpHeadset.c,679 :: 		if (255 == RingerLevel) RingerLevel = 0;
0x04F1	0x30FF      	MOVLW      255
0x04F2	0x0627      	XORWF      _RingerLevel, 0
0x04F3	0x1D03      	BTFSS      STATUS, 2
0x04F4	0x2CF6      	GOTO       L_main184
0x04F5	0x01A7      	CLRF       _RingerLevel
L_main184:
;bfpHeadset.c,680 :: 		if (10 == RingerLevel) RingerLevel = 9;
0x04F6	0x300A      	MOVLW      10
0x04F7	0x0627      	XORWF      _RingerLevel, 0
0x04F8	0x1D03      	BTFSS      STATUS, 2
0x04F9	0x2CFC      	GOTO       L_main185
0x04FA	0x3009      	MOVLW      9
0x04FB	0x00A7      	MOVWF      _RingerLevel
L_main185:
;bfpHeadset.c,681 :: 		}
L_main181:
;bfpHeadset.c,682 :: 		PresentConfigVal();
0x04FC	0x2715      	CALL       _PresentConfigVal
;bfpHeadset.c,683 :: 		} else if (BTMode)
0x04FD	0x2D3B      	GOTO       L_main186
L_main163:
0x04FE	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x04FF	0x2D06      	GOTO       L_main187
;bfpHeadset.c,684 :: 		SendAT(AT_BTNext + RotateAct, 0);
0x0500	0x082D      	MOVF       _RotateAct, 0
0x0501	0x3E2B      	ADDLW      43
0x0502	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0503	0x01BA      	CLRF       FARG_SendAT_wait200
0x0504	0x208D      	CALL       _SendAT
0x0505	0x2D3B      	GOTO       L_main188
L_main187:
;bfpHeadset.c,686 :: 		if (FMFreqChangeMode) {
0x0506	0x1D2A      	BTFSS      _FMFreqChangeMode, BitPos(_FMFreqChangeMode+0)
0x0507	0x2D22      	GOTO       L_main189
;bfpHeadset.c,687 :: 		if (ACT_INC == RotateAct) FMFreq++;
0x0508	0x3002      	MOVLW      2
0x0509	0x062D      	XORWF      _RotateAct, 0
0x050A	0x1D03      	BTFSS      STATUS, 2
0x050B	0x2D0D      	GOTO       L_main190
0x050C	0x0AA3      	INCF       _FMFreq, 1
L_main190:
;bfpHeadset.c,688 :: 		if (206 == FMFreq) FMFreq = 0;
0x050D	0x30CE      	MOVLW      206
0x050E	0x0623      	XORWF      _FMFreq, 0
0x050F	0x1D03      	BTFSS      STATUS, 2
0x0510	0x2D12      	GOTO       L_main191
0x0511	0x01A3      	CLRF       _FMFreq
L_main191:
;bfpHeadset.c,689 :: 		if (ACT_DEC == RotateAct) FMFreq--;
0x0512	0x3003      	MOVLW      3
0x0513	0x062D      	XORWF      _RotateAct, 0
0x0514	0x1D03      	BTFSS      STATUS, 2
0x0515	0x2D17      	GOTO       L_main192
0x0516	0x03A3      	DECF       _FMFreq, 1
L_main192:
;bfpHeadset.c,690 :: 		if (255 == FMFreq) FMFreq = 205;
0x0517	0x30FF      	MOVLW      255
0x0518	0x0623      	XORWF      _FMFreq, 0
0x0519	0x1D03      	BTFSS      STATUS, 2
0x051A	0x2D1D      	GOTO       L_main193
0x051B	0x30CD      	MOVLW      205
0x051C	0x00A3      	MOVWF      _FMFreq
L_main193:
;bfpHeadset.c,691 :: 		SendAT(AT_FMFREQ, 0);
0x051D	0x303F      	MOVLW      63
0x051E	0x00B9      	MOVWF      FARG_SendAT_cmd
0x051F	0x01BA      	CLRF       FARG_SendAT_wait200
0x0520	0x208D      	CALL       _SendAT
;bfpHeadset.c,692 :: 		} else {
0x0521	0x2D3B      	GOTO       L_main194
L_main189:
;bfpHeadset.c,693 :: 		if (ACT_INC == RotateAct) FMVolume++;
0x0522	0x3002      	MOVLW      2
0x0523	0x062D      	XORWF      _RotateAct, 0
0x0524	0x1D03      	BTFSS      STATUS, 2
0x0525	0x2D27      	GOTO       L_main195
0x0526	0x0AA8      	INCF       _FMVolume, 1
L_main195:
;bfpHeadset.c,694 :: 		if (7 == FMVolume) FMVolume = 6;
0x0527	0x3007      	MOVLW      7
0x0528	0x0628      	XORWF      _FMVolume, 0
0x0529	0x1D03      	BTFSS      STATUS, 2
0x052A	0x2D2D      	GOTO       L_main196
0x052B	0x3006      	MOVLW      6
0x052C	0x00A8      	MOVWF      _FMVolume
L_main196:
;bfpHeadset.c,695 :: 		if (ACT_DEC == RotateAct) FMVolume--;
0x052D	0x3003      	MOVLW      3
0x052E	0x062D      	XORWF      _RotateAct, 0
0x052F	0x1D03      	BTFSS      STATUS, 2
0x0530	0x2D32      	GOTO       L_main197
0x0531	0x03A8      	DECF       _FMVolume, 1
L_main197:
;bfpHeadset.c,696 :: 		if (255 == FMVolume) FMVolume = 0;
0x0532	0x30FF      	MOVLW      255
0x0533	0x0628      	XORWF      _FMVolume, 0
0x0534	0x1D03      	BTFSS      STATUS, 2
0x0535	0x2D37      	GOTO       L_main198
0x0536	0x01A8      	CLRF       _FMVolume
L_main198:
;bfpHeadset.c,697 :: 		SendAT(AT_FMVOLUME, 0);
0x0537	0x303E      	MOVLW      62
0x0538	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0539	0x01BA      	CLRF       FARG_SendAT_wait200
0x053A	0x208D      	CALL       _SendAT
;bfpHeadset.c,698 :: 		}
L_main194:
;bfpHeadset.c,699 :: 		}
L_main188:
L_main186:
;bfpHeadset.c,700 :: 		RotateAct = ACT_NONE;
0x053B	0x3064      	MOVLW      100
0x053C	0x00AD      	MOVWF      _RotateAct
;bfpHeadset.c,701 :: 		} else if ((!RotHasPushed) && (LastPush)) {
0x053D	0x2D7F      	GOTO       L_main199
L_main162:
0x053E	0x182A      	BTFSC      _RotHasPushed, BitPos(_RotHasPushed+0)
0x053F	0x2D7F      	GOTO       L_main202
0x0540	0x1EAA      	BTFSS      _LastPush, BitPos(_LastPush+0)
0x0541	0x2D7F      	GOTO       L_main202
L__main230:
;bfpHeadset.c,702 :: 		if (BTMode) SendAT(AT_BTNext + RotateAct, 0);
0x0542	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x0543	0x2D49      	GOTO       L_main203
0x0544	0x082D      	MOVF       _RotateAct, 0
0x0545	0x3E2B      	ADDLW      43
0x0546	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0547	0x01BA      	CLRF       FARG_SendAT_wait200
0x0548	0x208D      	CALL       _SendAT
L_main203:
;bfpHeadset.c,703 :: 		if (ACT_DOWN_DEC == RotateAct) {
0x0549	0x3001      	MOVLW      1
0x054A	0x062D      	XORWF      _RotateAct, 0
0x054B	0x1D03      	BTFSS      STATUS, 2
0x054C	0x2D63      	GOTO       L_main204
;bfpHeadset.c,705 :: 		SendAT(AT_ATA, 0);
0x054D	0x3001      	MOVLW      1
0x054E	0x00B9      	MOVWF      FARG_SendAT_cmd
0x054F	0x01BA      	CLRF       FARG_SendAT_wait200
0x0550	0x208D      	CALL       _SendAT
;bfpHeadset.c,706 :: 		Delay_ms(800);
0x0551	0x3005      	MOVLW      5
0x0552	0x00FB      	MOVWF      R11
0x0553	0x300F      	MOVLW      15
0x0554	0x00FC      	MOVWF      R12
0x0555	0x30F1      	MOVLW      241
0x0556	0x00FD      	MOVWF      R13
L_main205:
0x0557	0x0BFD      	DECFSZ     R13, 1
0x0558	0x2D57      	GOTO       L_main205
0x0559	0x0BFC      	DECFSZ     R12, 1
0x055A	0x2D57      	GOTO       L_main205
0x055B	0x0BFB      	DECFSZ     R11, 1
0x055C	0x2D57      	GOTO       L_main205
;bfpHeadset.c,708 :: 		if (BTMode) SendAT(AT_BTATA, 0);
0x055D	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x055E	0x2D63      	GOTO       L_main206
0x055F	0x3024      	MOVLW      36
0x0560	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0561	0x01BA      	CLRF       FARG_SendAT_wait200
0x0562	0x208D      	CALL       _SendAT
L_main206:
;bfpHeadset.c,709 :: 		}
L_main204:
;bfpHeadset.c,710 :: 		if (ACT_DOWN_INC == RotateAct) {
0x0563	0x3000      	MOVLW      0
0x0564	0x062D      	XORWF      _RotateAct, 0
0x0565	0x1D03      	BTFSS      STATUS, 2
0x0566	0x2D7D      	GOTO       L_main207
;bfpHeadset.c,712 :: 		SendAT(AT_ATH, 0);
0x0567	0x3002      	MOVLW      2
0x0568	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0569	0x01BA      	CLRF       FARG_SendAT_wait200
0x056A	0x208D      	CALL       _SendAT
;bfpHeadset.c,713 :: 		Delay_ms(800);
0x056B	0x3005      	MOVLW      5
0x056C	0x00FB      	MOVWF      R11
0x056D	0x300F      	MOVLW      15
0x056E	0x00FC      	MOVWF      R12
0x056F	0x30F1      	MOVLW      241
0x0570	0x00FD      	MOVWF      R13
L_main208:
0x0571	0x0BFD      	DECFSZ     R13, 1
0x0572	0x2D71      	GOTO       L_main208
0x0573	0x0BFC      	DECFSZ     R12, 1
0x0574	0x2D71      	GOTO       L_main208
0x0575	0x0BFB      	DECFSZ     R11, 1
0x0576	0x2D71      	GOTO       L_main208
;bfpHeadset.c,715 :: 		if (BTMode) SendAT(AT_BTATH, 0);
0x0577	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x0578	0x2D7D      	GOTO       L_main209
0x0579	0x3025      	MOVLW      37
0x057A	0x00B9      	MOVWF      FARG_SendAT_cmd
0x057B	0x01BA      	CLRF       FARG_SendAT_wait200
0x057C	0x208D      	CALL       _SendAT
L_main209:
;bfpHeadset.c,716 :: 		}
L_main207:
;bfpHeadset.c,717 :: 		RotateAct = ACT_NONE;
0x057D	0x3064      	MOVLW      100
0x057E	0x00AD      	MOVWF      _RotateAct
;bfpHeadset.c,718 :: 		}
L_main202:
L_main199:
;bfpHeadset.c,719 :: 		}
L_main161:
;bfpHeadset.c,720 :: 		if (RotHasPushed != LastPush) LastPush = RotHasPushed;
0x057F	0x182A      	BTFSC      _RotHasPushed, BitPos(_RotHasPushed+0)
0x0580	0x2D84      	GOTO       L__main261
0x0581	0x1EAA      	BTFSS      _LastPush, BitPos(_LastPush+0)
0x0582	0x2D8C      	GOTO       L_main210
0x0583	0x2D87      	GOTO       L__main262
L__main261:
0x0584	0x1EAA      	BTFSS      _LastPush, BitPos(_LastPush+0)
0x0585	0x2D87      	GOTO       L__main262
0x0586	0x2D8C      	GOTO       L_main210
L__main262:
0x0587	0x182A      	BTFSC      _RotHasPushed, BitPos(_RotHasPushed+0)
0x0588	0x2D8B      	GOTO       L__main263
0x0589	0x12AA      	BCF        _LastPush, BitPos(_LastPush+0)
0x058A	0x2D8C      	GOTO       L__main264
L__main263:
0x058B	0x16AA      	BSF        _LastPush, BitPos(_LastPush+0)
L__main264:
L_main210:
;bfpHeadset.c,721 :: 		if (RotPush) RotHasPushed = 0b0;
0x058C	0x1D05      	BTFSS      GP2_bit, BitPos(GP2_bit+0)
0x058D	0x2D8F      	GOTO       L_main211
0x058E	0x102A      	BCF        _RotHasPushed, BitPos(_RotHasPushed+0)
L_main211:
;bfpHeadset.c,722 :: 		} else if ((RotateAct < ACT_BTON) || (RotateAct > ACT_FMON) || (ConfigMode.B7))
0x058F	0x2DA4      	GOTO       L_main212
L_main141:
0x0590	0x305F      	MOVLW      95
0x0591	0x022D      	SUBWF      _RotateAct, 0
0x0592	0x1C03      	BTFSS      STATUS, 0
0x0593	0x2D9B      	GOTO       L__main229
0x0594	0x082D      	MOVF       _RotateAct, 0
0x0595	0x3C69      	SUBLW      105
0x0596	0x1C03      	BTFSS      STATUS, 0
0x0597	0x2D9B      	GOTO       L__main229
0x0598	0x1BB4      	BTFSC      _ConfigMode, 7
0x0599	0x2D9B      	GOTO       L__main229
0x059A	0x2D9D      	GOTO       L_main215
L__main229:
;bfpHeadset.c,723 :: 		TurnOn();
0x059B	0x25A6      	CALL       _TurnOn
0x059C	0x2DA4      	GOTO       L_main216
L_main215:
;bfpHeadset.c,724 :: 		else if (!NoActivity) {
0x059D	0x1283      	BCF        STATUS, 5
0x059E	0x082B      	MOVF       _NoActivity, 0
0x059F	0x1D03      	BTFSS      STATUS, 2
0x05A0	0x2DA4      	GOTO       L_main217
;bfpHeadset.c,725 :: 		asm SLEEP;
0x05A1	0x0063      	SLEEP
;bfpHeadset.c,726 :: 		asm NOP;
0x05A2	0x0000      	NOP
;bfpHeadset.c,727 :: 		ConfigMode = 0;
0x05A3	0x01B4      	CLRF       _ConfigMode
;bfpHeadset.c,728 :: 		}
L_main217:
L_main216:
L_main212:
;bfpHeadset.c,729 :: 		}
0x05A4	0x2C14      	GOTO       L_main139
;bfpHeadset.c,730 :: 		}
L_end_main:
0x05A5	0x2DA5      	GOTO       $+0
; end of _main
_TurnOn:
;bfpHeadset.c,426 :: 		void TurnOn() {
;bfpHeadset.c,427 :: 		GIE_bit = 0b0;
0x05A6	0x138B      	BCF        GIE_bit, BitPos(GIE_bit+0)
;bfpHeadset.c,428 :: 		Power = 0b1;
0x05A7	0x1283      	BCF        STATUS, 5
0x05A8	0x172A      	BSF        _Power, BitPos(_Power+0)
;bfpHeadset.c,429 :: 		S800Pow = 0b0;
0x05A9	0x1085      	BCF        GP1_bit, BitPos(GP1_bit+0)
;bfpHeadset.c,430 :: 		Delay_ms(2000);
0x05AA	0x300B      	MOVLW      11
0x05AB	0x00FB      	MOVWF      R11
0x05AC	0x3026      	MOVLW      38
0x05AD	0x00FC      	MOVWF      R12
0x05AE	0x305D      	MOVLW      93
0x05AF	0x00FD      	MOVWF      R13
L_TurnOn74:
0x05B0	0x0BFD      	DECFSZ     R13, 1
0x05B1	0x2DB0      	GOTO       L_TurnOn74
0x05B2	0x0BFC      	DECFSZ     R12, 1
0x05B3	0x2DB0      	GOTO       L_TurnOn74
0x05B4	0x0BFB      	DECFSZ     R11, 1
0x05B5	0x2DB0      	GOTO       L_TurnOn74
0x05B6	0x0000      	NOP
0x05B7	0x0000      	NOP
;bfpHeadset.c,431 :: 		S800Pow = 0b1;
0x05B8	0x1485      	BSF        GP1_bit, BitPos(GP1_bit+0)
;bfpHeadset.c,432 :: 		SendAT(AT_AT, 1);
0x05B9	0x01B9      	CLRF       FARG_SendAT_cmd
0x05BA	0x3001      	MOVLW      1
0x05BB	0x00BA      	MOVWF      FARG_SendAT_wait200
0x05BC	0x208D      	CALL       _SendAT
;bfpHeadset.c,433 :: 		SendAT(AT_AT, 1);
0x05BD	0x01B9      	CLRF       FARG_SendAT_cmd
0x05BE	0x3001      	MOVLW      1
0x05BF	0x00BA      	MOVWF      FARG_SendAT_wait200
0x05C0	0x208D      	CALL       _SendAT
;bfpHeadset.c,434 :: 		SendAT(AT_AT, 1);
0x05C1	0x01B9      	CLRF       FARG_SendAT_cmd
0x05C2	0x3001      	MOVLW      1
0x05C3	0x00BA      	MOVWF      FARG_SendAT_wait200
0x05C4	0x208D      	CALL       _SendAT
;bfpHeadset.c,435 :: 		SendAT(AT_CFUN, 0);
0x05C5	0x300C      	MOVLW      12
0x05C6	0x00B9      	MOVWF      FARG_SendAT_cmd
0x05C7	0x01BA      	CLRF       FARG_SendAT_wait200
0x05C8	0x208D      	CALL       _SendAT
;bfpHeadset.c,436 :: 		BTMode = RotateAct < ACT_BTON;
0x05C9	0x305F      	MOVLW      95
0x05CA	0x022D      	SUBWF      _RotateAct, 0
0x05CB	0x3001      	MOVLW      1
0x05CC	0x1803      	BTFSC      STATUS, 0
0x05CD	0x3000      	MOVLW      0
0x05CE	0x00F0      	MOVWF      R0
0x05CF	0x1870      	BTFSC      R0, 0
0x05D0	0x2DD3      	GOTO       L__TurnOn239
0x05D1	0x13AA      	BCF        _BTMode, BitPos(_BTMode+0)
0x05D2	0x2DD4      	GOTO       L__TurnOn240
L__TurnOn239:
0x05D3	0x17AA      	BSF        _BTMode, BitPos(_BTMode+0)
L__TurnOn240:
;bfpHeadset.c,437 :: 		if (ConfigMode.B7) {
0x05D4	0x1FB4      	BTFSS      _ConfigMode, 7
0x05D5	0x2E2D      	GOTO       L_TurnOn75
;bfpHeadset.c,438 :: 		ConfigMode = CONFMOD_FIRSTITEM;
0x05D6	0x3080      	MOVLW      128
0x05D7	0x00B4      	MOVWF      _ConfigMode
;bfpHeadset.c,439 :: 		SendAT(AT_BTPOWEROFF, 0);
0x05D8	0x301E      	MOVLW      30
0x05D9	0x00B9      	MOVWF      FARG_SendAT_cmd
0x05DA	0x01BA      	CLRF       FARG_SendAT_wait200
0x05DB	0x208D      	CALL       _SendAT
;bfpHeadset.c,440 :: 		BTPairMode = EEPROM_Read(BT_PAIRMODE_ADDR);
0x05DC	0x300D      	MOVLW      13
0x05DD	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x05DE	0x27E9      	CALL       _EEPROM_Read
0x05DF	0x0870      	MOVF       R0, 0
0x05E0	0x1283      	BCF        STATUS, 5
0x05E1	0x00AE      	MOVWF      _BTPairMode
;bfpHeadset.c,441 :: 		if (BTPairMode > 1) BTPairMode = 1;
0x05E2	0x0870      	MOVF       R0, 0
0x05E3	0x3C01      	SUBLW      1
0x05E4	0x1803      	BTFSC      STATUS, 0
0x05E5	0x2DE8      	GOTO       L_TurnOn76
0x05E6	0x3001      	MOVLW      1
0x05E7	0x00AE      	MOVWF      _BTPairMode
L_TurnOn76:
;bfpHeadset.c,442 :: 		SpeakerVolume = EEPROM_Read(SPKVOL_ADDR);
0x05E8	0x3011      	MOVLW      17
0x05E9	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x05EA	0x27E9      	CALL       _EEPROM_Read
0x05EB	0x0870      	MOVF       R0, 0
0x05EC	0x1283      	BCF        STATUS, 5
0x05ED	0x00A6      	MOVWF      _SpeakerVolume
;bfpHeadset.c,443 :: 		if (SpeakerVolume > 9) SpeakerVolume = 3;
0x05EE	0x0870      	MOVF       R0, 0
0x05EF	0x3C09      	SUBLW      9
0x05F0	0x1803      	BTFSC      STATUS, 0
0x05F1	0x2DF4      	GOTO       L_TurnOn77
0x05F2	0x3003      	MOVLW      3
0x05F3	0x00A6      	MOVWF      _SpeakerVolume
L_TurnOn77:
;bfpHeadset.c,444 :: 		MicGain = EEPROM_Read(MICGAIN_ADDR);
0x05F4	0x3010      	MOVLW      16
0x05F5	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x05F6	0x27E9      	CALL       _EEPROM_Read
0x05F7	0x0870      	MOVF       R0, 0
0x05F8	0x1283      	BCF        STATUS, 5
0x05F9	0x00A5      	MOVWF      _MicGain
;bfpHeadset.c,445 :: 		if (MicGain > 9) MicGain = 4;
0x05FA	0x0870      	MOVF       R0, 0
0x05FB	0x3C09      	SUBLW      9
0x05FC	0x1803      	BTFSC      STATUS, 0
0x05FD	0x2E00      	GOTO       L_TurnOn78
0x05FE	0x3004      	MOVLW      4
0x05FF	0x00A5      	MOVWF      _MicGain
L_TurnOn78:
;bfpHeadset.c,446 :: 		RingTone = EEPROM_Read(RINGTONE_ADDR);
0x0600	0x300E      	MOVLW      14
0x0601	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x0602	0x27E9      	CALL       _EEPROM_Read
0x0603	0x0870      	MOVF       R0, 0
0x0604	0x1283      	BCF        STATUS, 5
0x0605	0x00A9      	MOVWF      _RingTone
;bfpHeadset.c,447 :: 		if ((RingTone == 0) || (RingTone > 19)) RingTone = 1;
0x0606	0x0870      	MOVF       R0, 0
0x0607	0x3A00      	XORLW      0
0x0608	0x1903      	BTFSC      STATUS, 2
0x0609	0x2E0F      	GOTO       L__TurnOn225
0x060A	0x0829      	MOVF       _RingTone, 0
0x060B	0x3C13      	SUBLW      19
0x060C	0x1C03      	BTFSS      STATUS, 0
0x060D	0x2E0F      	GOTO       L__TurnOn225
0x060E	0x2E11      	GOTO       L_TurnOn81
L__TurnOn225:
0x060F	0x3001      	MOVLW      1
0x0610	0x00A9      	MOVWF      _RingTone
L_TurnOn81:
;bfpHeadset.c,448 :: 		RingerLevel = EEPROM_Read(RINGERLEVEL_ADDR);
0x0611	0x300F      	MOVLW      15
0x0612	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x0613	0x27E9      	CALL       _EEPROM_Read
0x0614	0x0870      	MOVF       R0, 0
0x0615	0x1283      	BCF        STATUS, 5
0x0616	0x00A7      	MOVWF      _RingerLevel
;bfpHeadset.c,449 :: 		if (RingerLevel > 9) RingerLevel = 2;
0x0617	0x0870      	MOVF       R0, 0
0x0618	0x3C09      	SUBLW      9
0x0619	0x1803      	BTFSC      STATUS, 0
0x061A	0x2E1D      	GOTO       L_TurnOn82
0x061B	0x3002      	MOVLW      2
0x061C	0x00A7      	MOVWF      _RingerLevel
L_TurnOn82:
;bfpHeadset.c,450 :: 		Delay_ms(2000);
0x061D	0x300B      	MOVLW      11
0x061E	0x00FB      	MOVWF      R11
0x061F	0x3026      	MOVLW      38
0x0620	0x00FC      	MOVWF      R12
0x0621	0x305D      	MOVLW      93
0x0622	0x00FD      	MOVWF      R13
L_TurnOn83:
0x0623	0x0BFD      	DECFSZ     R13, 1
0x0624	0x2E23      	GOTO       L_TurnOn83
0x0625	0x0BFC      	DECFSZ     R12, 1
0x0626	0x2E23      	GOTO       L_TurnOn83
0x0627	0x0BFB      	DECFSZ     R11, 1
0x0628	0x2E23      	GOTO       L_TurnOn83
0x0629	0x0000      	NOP
0x062A	0x0000      	NOP
;bfpHeadset.c,451 :: 		PresentConfigVal();
0x062B	0x2715      	CALL       _PresentConfigVal
;bfpHeadset.c,452 :: 		} else if (BTMode) {
0x062C	0x2EB3      	GOTO       L_TurnOn84
L_TurnOn75:
0x062D	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x062E	0x2E89      	GOTO       L_TurnOn85
;bfpHeadset.c,453 :: 		if (EEPROM_Read(RECONFIG_ADDR) != RECONFIG_VAL) {
0x062F	0x300C      	MOVLW      12
0x0630	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x0631	0x27E9      	CALL       _EEPROM_Read
0x0632	0x0870      	MOVF       R0, 0
0x0633	0x3AC0      	XORLW      192
0x0634	0x1903      	BTFSC      STATUS, 2
0x0635	0x2E81      	GOTO       L_TurnOn86
;bfpHeadset.c,454 :: 		SendAT(AT_BTPOWEROFF, 0);
0x0636	0x301E      	MOVLW      30
0x0637	0x1283      	BCF        STATUS, 5
0x0638	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0639	0x01BA      	CLRF       FARG_SendAT_wait200
0x063A	0x208D      	CALL       _SendAT
;bfpHeadset.c,455 :: 		Delay_ms(3000);
0x063B	0x3010      	MOVLW      16
0x063C	0x00FB      	MOVWF      R11
0x063D	0x3039      	MOVLW      57
0x063E	0x00FC      	MOVWF      R12
0x063F	0x300D      	MOVLW      13
0x0640	0x00FD      	MOVWF      R13
L_TurnOn87:
0x0641	0x0BFD      	DECFSZ     R13, 1
0x0642	0x2E41      	GOTO       L_TurnOn87
0x0643	0x0BFC      	DECFSZ     R12, 1
0x0644	0x2E41      	GOTO       L_TurnOn87
0x0645	0x0BFB      	DECFSZ     R11, 1
0x0646	0x2E41      	GOTO       L_TurnOn87
0x0647	0x0000      	NOP
0x0648	0x0000      	NOP
;bfpHeadset.c,456 :: 		SendAT(AT_IPR, 0);
0x0649	0x300B      	MOVLW      11
0x064A	0x00B9      	MOVWF      FARG_SendAT_cmd
0x064B	0x01BA      	CLRF       FARG_SendAT_wait200
0x064C	0x208D      	CALL       _SendAT
;bfpHeadset.c,457 :: 		SendAT(AT_CMGD_ALL, 0);
0x064D	0x300D      	MOVLW      13
0x064E	0x00B9      	MOVWF      FARG_SendAT_cmd
0x064F	0x01BA      	CLRF       FARG_SendAT_wait200
0x0650	0x208D      	CALL       _SendAT
;bfpHeadset.c,458 :: 		SendAT(AT_CNMI, 0);
0x0651	0x300E      	MOVLW      14
0x0652	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0653	0x01BA      	CLRF       FARG_SendAT_wait200
0x0654	0x208D      	CALL       _SendAT
;bfpHeadset.c,459 :: 		SendAT(AT_Save, 0);
0x0655	0x3003      	MOVLW      3
0x0656	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0657	0x01BA      	CLRF       FARG_SendAT_wait200
0x0658	0x208D      	CALL       _SendAT
;bfpHeadset.c,460 :: 		SendAT(AT_BTName, 0);
0x0659	0x3020      	MOVLW      32
0x065A	0x00B9      	MOVWF      FARG_SendAT_cmd
0x065B	0x01BA      	CLRF       FARG_SendAT_wait200
0x065C	0x208D      	CALL       _SendAT
;bfpHeadset.c,461 :: 		SendAT(AT_BTPAIRCFG, 0);
0x065D	0x3023      	MOVLW      35
0x065E	0x00B9      	MOVWF      FARG_SendAT_cmd
0x065F	0x01BA      	CLRF       FARG_SendAT_wait200
0x0660	0x208D      	CALL       _SendAT
;bfpHeadset.c,462 :: 		SendAT(AT_BTPOWERON, 0);
0x0661	0x301F      	MOVLW      31
0x0662	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0663	0x01BA      	CLRF       FARG_SendAT_wait200
0x0664	0x208D      	CALL       _SendAT
;bfpHeadset.c,463 :: 		Delay_ms(1000);
0x0665	0x3006      	MOVLW      6
0x0666	0x00FB      	MOVWF      R11
0x0667	0x3013      	MOVLW      19
0x0668	0x00FC      	MOVWF      R12
0x0669	0x30AD      	MOVLW      173
0x066A	0x00FD      	MOVWF      R13
L_TurnOn88:
0x066B	0x0BFD      	DECFSZ     R13, 1
0x066C	0x2E6B      	GOTO       L_TurnOn88
0x066D	0x0BFC      	DECFSZ     R12, 1
0x066E	0x2E6B      	GOTO       L_TurnOn88
0x066F	0x0BFB      	DECFSZ     R11, 1
0x0670	0x2E6B      	GOTO       L_TurnOn88
0x0671	0x0000      	NOP
0x0672	0x0000      	NOP
;bfpHeadset.c,464 :: 		SendAT(AT_BTVIS, 0);
0x0673	0x3021      	MOVLW      33
0x0674	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0675	0x01BA      	CLRF       FARG_SendAT_wait200
0x0676	0x208D      	CALL       _SendAT
;bfpHeadset.c,465 :: 		SendAT(AT_BTUNPAIR, 0);
0x0677	0x3022      	MOVLW      34
0x0678	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0679	0x01BA      	CLRF       FARG_SendAT_wait200
0x067A	0x208D      	CALL       _SendAT
;bfpHeadset.c,466 :: 		EEPROM_Write(RECONFIG_ADDR, RECONFIG_VAL);
0x067B	0x300C      	MOVLW      12
0x067C	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x067D	0x30C0      	MOVLW      192
0x067E	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x067F	0x27A3      	CALL       _EEPROM_Write
;bfpHeadset.c,467 :: 		} else
0x0680	0x2E86      	GOTO       L_TurnOn89
L_TurnOn86:
;bfpHeadset.c,468 :: 		SendAT(AT_BTPOWERON, 0);
0x0681	0x301F      	MOVLW      31
0x0682	0x1283      	BCF        STATUS, 5
0x0683	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0684	0x01BA      	CLRF       FARG_SendAT_wait200
0x0685	0x208D      	CALL       _SendAT
L_TurnOn89:
0x0686	0x1283      	BCF        STATUS, 5
;bfpHeadset.c,469 :: 		BTIsPlaying = 0b0;
0x0687	0x102C      	BCF        _BTIsPlaying, BitPos(_BTIsPlaying+0)
;bfpHeadset.c,470 :: 		} else {
0x0688	0x2EB3      	GOTO       L_TurnOn90
L_TurnOn85:
;bfpHeadset.c,471 :: 		SendAT(AT_BTPOWEROFF, 0);
0x0689	0x301E      	MOVLW      30
0x068A	0x00B9      	MOVWF      FARG_SendAT_cmd
0x068B	0x01BA      	CLRF       FARG_SendAT_wait200
0x068C	0x208D      	CALL       _SendAT
;bfpHeadset.c,472 :: 		FMVolume = EEPROM_Read(FM_VOLUME_ADDR);
0x068D	0x300A      	MOVLW      10
0x068E	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x068F	0x27E9      	CALL       _EEPROM_Read
0x0690	0x0870      	MOVF       R0, 0
0x0691	0x1283      	BCF        STATUS, 5
0x0692	0x00A8      	MOVWF      _FMVolume
;bfpHeadset.c,473 :: 		asm NOP;
0x0693	0x0000      	NOP
;bfpHeadset.c,474 :: 		asm NOP;
0x0694	0x0000      	NOP
;bfpHeadset.c,475 :: 		FMFreq = EEPROM_Read(FM_FREQ_ADDR);
0x0695	0x300B      	MOVLW      11
0x0696	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x0697	0x27E9      	CALL       _EEPROM_Read
0x0698	0x0870      	MOVF       R0, 0
0x0699	0x1283      	BCF        STATUS, 5
0x069A	0x00A3      	MOVWF      _FMFreq
;bfpHeadset.c,476 :: 		if (FMVolume > 6) FMVolume = 3;
0x069B	0x0828      	MOVF       _FMVolume, 0
0x069C	0x3C06      	SUBLW      6
0x069D	0x1803      	BTFSC      STATUS, 0
0x069E	0x2EA1      	GOTO       L_TurnOn91
0x069F	0x3003      	MOVLW      3
0x06A0	0x00A8      	MOVWF      _FMVolume
L_TurnOn91:
;bfpHeadset.c,477 :: 		if (FMFreq > 205) FMFreq = 0;
0x06A1	0x0823      	MOVF       _FMFreq, 0
0x06A2	0x3CCD      	SUBLW      205
0x06A3	0x1803      	BTFSC      STATUS, 0
0x06A4	0x2EA6      	GOTO       L_TurnOn92
0x06A5	0x01A3      	CLRF       _FMFreq
L_TurnOn92:
;bfpHeadset.c,478 :: 		SendAT(AT_FMVOLUME, 0);
0x06A6	0x303E      	MOVLW      62
0x06A7	0x00B9      	MOVWF      FARG_SendAT_cmd
0x06A8	0x01BA      	CLRF       FARG_SendAT_wait200
0x06A9	0x208D      	CALL       _SendAT
;bfpHeadset.c,479 :: 		SendAT(AT_FMOPEN, 0);
0x06AA	0x303C      	MOVLW      60
0x06AB	0x00B9      	MOVWF      FARG_SendAT_cmd
0x06AC	0x01BA      	CLRF       FARG_SendAT_wait200
0x06AD	0x208D      	CALL       _SendAT
;bfpHeadset.c,480 :: 		SendAT(AT_FMFREQ, 0);
0x06AE	0x303F      	MOVLW      63
0x06AF	0x00B9      	MOVWF      FARG_SendAT_cmd
0x06B0	0x01BA      	CLRF       FARG_SendAT_wait200
0x06B1	0x208D      	CALL       _SendAT
;bfpHeadset.c,481 :: 		FMFreqChangeMode = 0b0;
0x06B2	0x112A      	BCF        _FMFreqChangeMode, BitPos(_FMFreqChangeMode+0)
;bfpHeadset.c,482 :: 		}
L_TurnOn90:
L_TurnOn84:
;bfpHeadset.c,483 :: 		RotateAct = ACT_NONE;
0x06B3	0x3064      	MOVLW      100
0x06B4	0x00AD      	MOVWF      _RotateAct
;bfpHeadset.c,484 :: 		EEADR = EEPROM_DUMMY_ADDR;
0x06B5	0x30FA      	MOVLW      250
0x06B6	0x1683      	BSF        STATUS, 5
0x06B7	0x009B      	MOVWF      EEADR
;bfpHeadset.c,485 :: 		GIE_bit = 0b1;
0x06B8	0x178B      	BSF        GIE_bit, BitPos(GIE_bit+0)
;bfpHeadset.c,486 :: 		}
L_end_TurnOn:
0x06B9	0x0008      	RETURN
; end of _TurnOn
_TurnOff:
;bfpHeadset.c,488 :: 		void TurnOff() {
;bfpHeadset.c,490 :: 		GIE_bit = 0b0;
0x06BA	0x138B      	BCF        GIE_bit, BitPos(GIE_bit+0)
;bfpHeadset.c,491 :: 		if (!ConfigMode.B7) {
0x06BB	0x1283      	BCF        STATUS, 5
0x06BC	0x1BB4      	BTFSC      _ConfigMode, 7
0x06BD	0x2F01      	GOTO       L_TurnOff93
;bfpHeadset.c,492 :: 		if (BTMode) {
0x06BE	0x1FAA      	BTFSS      _BTMode, BitPos(_BTMode+0)
0x06BF	0x2ED3      	GOTO       L_TurnOff94
;bfpHeadset.c,493 :: 		SendAT(AT_BTPOWEROFF, 0);
0x06C0	0x301E      	MOVLW      30
0x06C1	0x00B9      	MOVWF      FARG_SendAT_cmd
0x06C2	0x01BA      	CLRF       FARG_SendAT_wait200
0x06C3	0x208D      	CALL       _SendAT
;bfpHeadset.c,494 :: 		Delay_ms(3000);
0x06C4	0x3010      	MOVLW      16
0x06C5	0x00FB      	MOVWF      R11
0x06C6	0x3039      	MOVLW      57
0x06C7	0x00FC      	MOVWF      R12
0x06C8	0x300D      	MOVLW      13
0x06C9	0x00FD      	MOVWF      R13
L_TurnOff95:
0x06CA	0x0BFD      	DECFSZ     R13, 1
0x06CB	0x2ECA      	GOTO       L_TurnOff95
0x06CC	0x0BFC      	DECFSZ     R12, 1
0x06CD	0x2ECA      	GOTO       L_TurnOff95
0x06CE	0x0BFB      	DECFSZ     R11, 1
0x06CF	0x2ECA      	GOTO       L_TurnOff95
0x06D0	0x0000      	NOP
0x06D1	0x0000      	NOP
;bfpHeadset.c,495 :: 		} else {
0x06D2	0x2F01      	GOTO       L_TurnOff96
L_TurnOff94:
;bfpHeadset.c,496 :: 		v = EEPROM_Read(FM_VOLUME_ADDR);
0x06D3	0x300A      	MOVLW      10
0x06D4	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x06D5	0x27E9      	CALL       _EEPROM_Read
0x06D6	0x0870      	MOVF       R0, 0
0x06D7	0x1283      	BCF        STATUS, 5
0x06D8	0x00B5      	MOVWF      TurnOff_v_L0
;bfpHeadset.c,497 :: 		asm NOP;
0x06D9	0x0000      	NOP
;bfpHeadset.c,498 :: 		asm NOP;
0x06DA	0x0000      	NOP
;bfpHeadset.c,499 :: 		f = EEPROM_Read(FM_FREQ_ADDR);
0x06DB	0x300B      	MOVLW      11
0x06DC	0x00BC      	MOVWF      FARG_EEPROM_Read_Address
0x06DD	0x27E9      	CALL       _EEPROM_Read
0x06DE	0x0870      	MOVF       R0, 0
0x06DF	0x1283      	BCF        STATUS, 5
0x06E0	0x00B6      	MOVWF      TurnOff_f_L0
;bfpHeadset.c,500 :: 		asm NOP;
0x06E1	0x0000      	NOP
;bfpHeadset.c,501 :: 		asm NOP;
0x06E2	0x0000      	NOP
;bfpHeadset.c,502 :: 		SendAT(AT_FMCLOSE, 0);
0x06E3	0x303D      	MOVLW      61
0x06E4	0x00B9      	MOVWF      FARG_SendAT_cmd
0x06E5	0x01BA      	CLRF       FARG_SendAT_wait200
0x06E6	0x208D      	CALL       _SendAT
;bfpHeadset.c,503 :: 		if (v != FMVolume) EEPROM_Write(FM_VOLUME_ADDR, FMVolume);
0x06E7	0x0835      	MOVF       TurnOff_v_L0, 0
0x06E8	0x0628      	XORWF      _FMVolume, 0
0x06E9	0x1903      	BTFSC      STATUS, 2
0x06EA	0x2EF0      	GOTO       L_TurnOff97
0x06EB	0x300A      	MOVLW      10
0x06EC	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x06ED	0x0828      	MOVF       _FMVolume, 0
0x06EE	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x06EF	0x27A3      	CALL       _EEPROM_Write
L_TurnOff97:
;bfpHeadset.c,504 :: 		asm NOP;
0x06F0	0x0000      	NOP
;bfpHeadset.c,505 :: 		asm NOP;
0x06F1	0x0000      	NOP
;bfpHeadset.c,506 :: 		if (f != FMFreq) EEPROM_Write(FM_FREQ_ADDR, FMFreq);
0x06F2	0x1283      	BCF        STATUS, 5
0x06F3	0x0836      	MOVF       TurnOff_f_L0, 0
0x06F4	0x0623      	XORWF      _FMFreq, 0
0x06F5	0x1903      	BTFSC      STATUS, 2
0x06F6	0x2EFC      	GOTO       L_TurnOff98
0x06F7	0x300B      	MOVLW      11
0x06F8	0x00B7      	MOVWF      FARG_EEPROM_Write_Address
0x06F9	0x0823      	MOVF       _FMFreq, 0
0x06FA	0x00B8      	MOVWF      FARG_EEPROM_Write_data_
0x06FB	0x27A3      	CALL       _EEPROM_Write
L_TurnOff98:
0x06FC	0x1683      	BSF        STATUS, 5
;bfpHeadset.c,507 :: 		asm NOP;
0x06FD	0x0000      	NOP
;bfpHeadset.c,508 :: 		asm NOP;
0x06FE	0x0000      	NOP
;bfpHeadset.c,509 :: 		EEADR = EEPROM_DUMMY_ADDR;
0x06FF	0x30FA      	MOVLW      250
0x0700	0x009B      	MOVWF      EEADR
;bfpHeadset.c,510 :: 		}
L_TurnOff96:
;bfpHeadset.c,511 :: 		}
L_TurnOff93:
;bfpHeadset.c,512 :: 		S800Pow = 0b0;
0x0701	0x1283      	BCF        STATUS, 5
0x0702	0x1085      	BCF        GP1_bit, BitPos(GP1_bit+0)
;bfpHeadset.c,513 :: 		Delay_ms(2000);
0x0703	0x300B      	MOVLW      11
0x0704	0x00FB      	MOVWF      R11
0x0705	0x3026      	MOVLW      38
0x0706	0x00FC      	MOVWF      R12
0x0707	0x305D      	MOVLW      93
0x0708	0x00FD      	MOVWF      R13
L_TurnOff99:
0x0709	0x0BFD      	DECFSZ     R13, 1
0x070A	0x2F09      	GOTO       L_TurnOff99
0x070B	0x0BFC      	DECFSZ     R12, 1
0x070C	0x2F09      	GOTO       L_TurnOff99
0x070D	0x0BFB      	DECFSZ     R11, 1
0x070E	0x2F09      	GOTO       L_TurnOff99
0x070F	0x0000      	NOP
0x0710	0x0000      	NOP
;bfpHeadset.c,514 :: 		S800Pow = 0b1;
0x0711	0x1485      	BSF        GP1_bit, BitPos(GP1_bit+0)
;bfpHeadset.c,515 :: 		Power = 0b0;
0x0712	0x132A      	BCF        _Power, BitPos(_Power+0)
;bfpHeadset.c,516 :: 		GIE_bit = 0b1;
0x0713	0x178B      	BSF        GIE_bit, BitPos(GIE_bit+0)
;bfpHeadset.c,517 :: 		}
L_end_TurnOff:
0x0714	0x0008      	RETURN
; end of _TurnOff
_PresentConfigVal:
;bfpHeadset.c,402 :: 		void PresentConfigVal() {
;bfpHeadset.c,403 :: 		if (CONFMOD_BTPAIRING == ConfigMode) {
0x0715	0x3080      	MOVLW      128
0x0716	0x1283      	BCF        STATUS, 5
0x0717	0x0634      	XORWF      _ConfigMode, 0
0x0718	0x1D03      	BTFSS      STATUS, 2
0x0719	0x2F27      	GOTO       L_PresentConfigVal68
;bfpHeadset.c,404 :: 		BeepTim = 2;
0x071A	0x3002      	MOVLW      2
0x071B	0x00B1      	MOVWF      _BeepTim
;bfpHeadset.c,405 :: 		SendAT(AT_Beep, 0);
0x071C	0x3046      	MOVLW      70
0x071D	0x00B9      	MOVWF      FARG_SendAT_cmd
0x071E	0x01BA      	CLRF       FARG_SendAT_wait200
0x071F	0x208D      	CALL       _SendAT
;bfpHeadset.c,406 :: 		if (!BTPairMode) SendAT(AT_Beep, 0);
0x0720	0x082E      	MOVF       _BTPairMode, 0
0x0721	0x1D03      	BTFSS      STATUS, 2
0x0722	0x2F27      	GOTO       L_PresentConfigVal69
0x0723	0x3046      	MOVLW      70
0x0724	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0725	0x01BA      	CLRF       FARG_SendAT_wait200
0x0726	0x208D      	CALL       _SendAT
L_PresentConfigVal69:
;bfpHeadset.c,407 :: 		}
L_PresentConfigVal68:
;bfpHeadset.c,408 :: 		if (CONFMOD_SPKVOL == ConfigMode) {
0x0727	0x3081      	MOVLW      129
0x0728	0x0634      	XORWF      _ConfigMode, 0
0x0729	0x1D03      	BTFSS      STATUS, 2
0x072A	0x2F35      	GOTO       L_PresentConfigVal70
;bfpHeadset.c,409 :: 		BeepTim = SpeakerVolume;
0x072B	0x0826      	MOVF       _SpeakerVolume, 0
0x072C	0x00B1      	MOVWF      _BeepTim
;bfpHeadset.c,410 :: 		SendAT(AT_CLVL, 0);
0x072D	0x3013      	MOVLW      19
0x072E	0x00B9      	MOVWF      FARG_SendAT_cmd
0x072F	0x01BA      	CLRF       FARG_SendAT_wait200
0x0730	0x208D      	CALL       _SendAT
;bfpHeadset.c,411 :: 		SendAT(AT_Beep, 0);
0x0731	0x3046      	MOVLW      70
0x0732	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0733	0x01BA      	CLRF       FARG_SendAT_wait200
0x0734	0x208D      	CALL       _SendAT
;bfpHeadset.c,412 :: 		}
L_PresentConfigVal70:
;bfpHeadset.c,413 :: 		if (CONFMOD_MICGAIN == ConfigMode) {
0x0735	0x3082      	MOVLW      130
0x0736	0x0634      	XORWF      _ConfigMode, 0
0x0737	0x1D03      	BTFSS      STATUS, 2
0x0738	0x2F43      	GOTO       L_PresentConfigVal71
;bfpHeadset.c,414 :: 		BeepTim = MicGain;
0x0739	0x0825      	MOVF       _MicGain, 0
0x073A	0x00B1      	MOVWF      _BeepTim
;bfpHeadset.c,415 :: 		SendAT(AT_CMIC, 0);
0x073B	0x3012      	MOVLW      18
0x073C	0x00B9      	MOVWF      FARG_SendAT_cmd
0x073D	0x01BA      	CLRF       FARG_SendAT_wait200
0x073E	0x208D      	CALL       _SendAT
;bfpHeadset.c,416 :: 		SendAT(AT_Beep, 0);
0x073F	0x3046      	MOVLW      70
0x0740	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0741	0x01BA      	CLRF       FARG_SendAT_wait200
0x0742	0x208D      	CALL       _SendAT
;bfpHeadset.c,417 :: 		}
L_PresentConfigVal71:
;bfpHeadset.c,418 :: 		if (CONFMOD_RINGTONE == ConfigMode)
0x0743	0x3083      	MOVLW      131
0x0744	0x0634      	XORWF      _ConfigMode, 0
0x0745	0x1D03      	BTFSS      STATUS, 2
0x0746	0x2F4B      	GOTO       L_PresentConfigVal72
;bfpHeadset.c,419 :: 		SendAT(AT_PlayRingTone, 0);
0x0747	0x300F      	MOVLW      15
0x0748	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0749	0x01BA      	CLRF       FARG_SendAT_wait200
0x074A	0x208D      	CALL       _SendAT
L_PresentConfigVal72:
;bfpHeadset.c,420 :: 		if (CONFMOD_RINGVOL == ConfigMode) {
0x074B	0x3084      	MOVLW      132
0x074C	0x0634      	XORWF      _ConfigMode, 0
0x074D	0x1D03      	BTFSS      STATUS, 2
0x074E	0x2F55      	GOTO       L_PresentConfigVal73
;bfpHeadset.c,421 :: 		BeepTim = RingerLevel;
0x074F	0x0827      	MOVF       _RingerLevel, 0
0x0750	0x00B1      	MOVWF      _BeepTim
;bfpHeadset.c,422 :: 		SendAT(AT_CRSL, 0);
0x0751	0x3011      	MOVLW      17
0x0752	0x00B9      	MOVWF      FARG_SendAT_cmd
0x0753	0x01BA      	CLRF       FARG_SendAT_wait200
0x0754	0x208D      	CALL       _SendAT
;bfpHeadset.c,423 :: 		}
L_PresentConfigVal73:
;bfpHeadset.c,424 :: 		}
L_end_PresentConfigVal:
0x0755	0x0008      	RETURN
; end of _PresentConfigVal
_UARTWrite:
;bfpHeadset.c,90 :: 		void UARTWrite(char dt) {
;bfpHeadset.c,92 :: 		S800RX = 0b0;
0x0756	0x1283      	BCF        STATUS, 5
0x0757	0x1005      	BCF        GP0_bit, BitPos(GP0_bit+0)
;bfpHeadset.c,93 :: 		Delay_us(UART_DELAY);
0x0758	0x3002      	MOVLW      2
0x0759	0x00FC      	MOVWF      R12
0x075A	0x3013      	MOVLW      19
0x075B	0x00FD      	MOVWF      R13
L_UARTWrite0:
0x075C	0x0BFD      	DECFSZ     R13, 1
0x075D	0x2F5C      	GOTO       L_UARTWrite0
0x075E	0x0BFC      	DECFSZ     R12, 1
0x075F	0x2F5C      	GOTO       L_UARTWrite0
0x0760	0x0000      	NOP
;bfpHeadset.c,94 :: 		for (k = 1; k; k <<= 1) {
0x0761	0x3001      	MOVLW      1
0x0762	0x00F1      	MOVWF      R1
L_UARTWrite1:
0x0763	0x0871      	MOVF       R1, 0
0x0764	0x1903      	BTFSC      STATUS, 2
0x0765	0x2F7A      	GOTO       L_UARTWrite2
;bfpHeadset.c,95 :: 		if (dt & k) S800RX = 0b1; else S800RX = 0b0;
0x0766	0x0871      	MOVF       R1, 0
0x0767	0x053C      	ANDWF      FARG_UARTWrite_dt, 0
0x0768	0x00F0      	MOVWF      R0
0x0769	0x1903      	BTFSC      STATUS, 2
0x076A	0x2F6D      	GOTO       L_UARTWrite4
0x076B	0x1405      	BSF        GP0_bit, BitPos(GP0_bit+0)
0x076C	0x2F6E      	GOTO       L_UARTWrite5
L_UARTWrite4:
0x076D	0x1005      	BCF        GP0_bit, BitPos(GP0_bit+0)
L_UARTWrite5:
;bfpHeadset.c,96 :: 		Delay_us(UART_DELAY);
0x076E	0x3002      	MOVLW      2
0x076F	0x00FC      	MOVWF      R12
0x0770	0x3013      	MOVLW      19
0x0771	0x00FD      	MOVWF      R13
L_UARTWrite6:
0x0772	0x0BFD      	DECFSZ     R13, 1
0x0773	0x2F72      	GOTO       L_UARTWrite6
0x0774	0x0BFC      	DECFSZ     R12, 1
0x0775	0x2F72      	GOTO       L_UARTWrite6
0x0776	0x0000      	NOP
;bfpHeadset.c,94 :: 		for (k = 1; k; k <<= 1) {
0x0777	0x0DF1      	RLF        R1, 1
0x0778	0x1071      	BCF        R1, 0
;bfpHeadset.c,97 :: 		}
0x0779	0x2F63      	GOTO       L_UARTWrite1
L_UARTWrite2:
;bfpHeadset.c,98 :: 		S800RX = 0b1;
0x077A	0x1405      	BSF        GP0_bit, BitPos(GP0_bit+0)
;bfpHeadset.c,99 :: 		Delay_us(UART_DELAY);
0x077B	0x3002      	MOVLW      2
0x077C	0x00FC      	MOVWF      R12
0x077D	0x3013      	MOVLW      19
0x077E	0x00FD      	MOVWF      R13
L_UARTWrite7:
0x077F	0x0BFD      	DECFSZ     R13, 1
0x0780	0x2F7F      	GOTO       L_UARTWrite7
0x0781	0x0BFC      	DECFSZ     R12, 1
0x0782	0x2F7F      	GOTO       L_UARTWrite7
0x0783	0x0000      	NOP
;bfpHeadset.c,100 :: 		}
L_end_UARTWrite:
0x0784	0x0008      	RETURN
; end of _UARTWrite
_CheckCfgMdDec:
;bfpHeadset.c,519 :: 		void CheckCfgMdDec() {
;bfpHeadset.c,520 :: 		if (ConfigMode < 10)
0x0785	0x300A      	MOVLW      10
0x0786	0x1283      	BCF        STATUS, 5
0x0787	0x0234      	SUBWF      _ConfigMode, 0
0x0788	0x1803      	BTFSC      STATUS, 0
0x0789	0x2F8D      	GOTO       L_CheckCfgMdDec100
;bfpHeadset.c,521 :: 		ConfigMode = 10;
0x078A	0x300A      	MOVLW      10
0x078B	0x00B4      	MOVWF      _ConfigMode
0x078C	0x2FA2      	GOTO       L_CheckCfgMdDec101
L_CheckCfgMdDec100:
;bfpHeadset.c,522 :: 		else if ((ConfigMode > 19) && (ConfigMode < 30)) {
0x078D	0x0834      	MOVF       _ConfigMode, 0
0x078E	0x3C13      	SUBLW      19
0x078F	0x1803      	BTFSC      STATUS, 0
0x0790	0x2FA1      	GOTO       L_CheckCfgMdDec104
0x0791	0x301E      	MOVLW      30
0x0792	0x0234      	SUBWF      _ConfigMode, 0
0x0793	0x1803      	BTFSC      STATUS, 0
0x0794	0x2FA1      	GOTO       L_CheckCfgMdDec104
L__CheckCfgMdDec226:
;bfpHeadset.c,523 :: 		if (22 == ConfigMode) ConfigMode = 128; else ConfigMode++;
0x0795	0x3016      	MOVLW      22
0x0796	0x0634      	XORWF      _ConfigMode, 0
0x0797	0x1D03      	BTFSS      STATUS, 2
0x0798	0x2F9C      	GOTO       L_CheckCfgMdDec105
0x0799	0x3080      	MOVLW      128
0x079A	0x00B4      	MOVWF      _ConfigMode
0x079B	0x2FA0      	GOTO       L_CheckCfgMdDec106
L_CheckCfgMdDec105:
0x079C	0x0A34      	INCF       _ConfigMode, 0
0x079D	0x00F0      	MOVWF      R0
0x079E	0x0870      	MOVF       R0, 0
0x079F	0x00B4      	MOVWF      _ConfigMode
L_CheckCfgMdDec106:
;bfpHeadset.c,524 :: 		} else
0x07A0	0x2FA2      	GOTO       L_CheckCfgMdDec107
L_CheckCfgMdDec104:
;bfpHeadset.c,525 :: 		ConfigMode = 0;
0x07A1	0x01B4      	CLRF       _ConfigMode
L_CheckCfgMdDec107:
L_CheckCfgMdDec101:
;bfpHeadset.c,526 :: 		}
L_end_CheckCfgMdDec:
0x07A2	0x0008      	RETURN
; end of _CheckCfgMdDec
_EEPROM_Write:
;__Lib_EEPROM.c,16 :: 		
;__Lib_EEPROM.c,20 :: 		
L_EEPROM_Write0:
0x07A3	0x1683      	BSF        STATUS, 5
0x07A4	0x1C9C      	BTFSS      EECON1, 1
0x07A5	0x2FA8      	GOTO       L_EEPROM_Write1
0x07A6	0x0000      	NOP
0x07A7	0x2FA3      	GOTO       L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM.c,21 :: 		
0x07A8	0x1283      	BCF        STATUS, 5
0x07A9	0x0837      	MOVF       FARG_EEPROM_Write_Address, 0
0x07AA	0x1683      	BSF        STATUS, 5
0x07AB	0x009B      	MOVWF      EEADR
;__Lib_EEPROM.c,22 :: 		
0x07AC	0x1283      	BCF        STATUS, 5
0x07AD	0x0838      	MOVF       FARG_EEPROM_Write_data_, 0
0x07AE	0x1683      	BSF        STATUS, 5
0x07AF	0x009A      	MOVWF      EEDATA
;__Lib_EEPROM.c,23 :: 		
0x07B0	0x139C      	BCF        EECON1, 7
;__Lib_EEPROM.c,24 :: 		
0x07B1	0x151C      	BSF        EECON1, 2
;__Lib_EEPROM.c,26 :: 		
0x07B2	0x080B      	MOVF       INTCON, 0
0x07B3	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,29 :: 		
0x07B4	0x138B      	BCF        INTCON, 7
;__Lib_EEPROM.c,30 :: 		
0x07B5	0x3055      	MOVLW      85
0x07B6	0x009D      	MOVWF      EECON2
;__Lib_EEPROM.c,31 :: 		
0x07B7	0x30AA      	MOVLW      170
0x07B8	0x009D      	MOVWF      EECON2
;__Lib_EEPROM.c,32 :: 		
0x07B9	0x149C      	BSF        EECON1, 1
;__Lib_EEPROM.c,36 :: 		
0x07BA	0x1BF0      	BTFSC      R0, 7
0x07BB	0x2FBE      	GOTO       L__EEPROM_Write4
0x07BC	0x138B      	BCF        INTCON, 7
0x07BD	0x2FBF      	GOTO       L__EEPROM_Write5
L__EEPROM_Write4:
0x07BE	0x178B      	BSF        INTCON, 7
L__EEPROM_Write5:
;__Lib_EEPROM.c,37 :: 		
0x07BF	0x111C      	BCF        EECON1, 2
;__Lib_EEPROM.c,38 :: 		
L_end_EEPROM_Write:
0x07C0	0x0008      	RETURN
; end of _EEPROM_Write
_CheckCfgMdInc:
;bfpHeadset.c,528 :: 		void CheckCfgMdInc() {
;bfpHeadset.c,529 :: 		if ((ConfigMode > 9) && (ConfigMode < 20)) {
0x07C1	0x1283      	BCF        STATUS, 5
0x07C2	0x0834      	MOVF       _ConfigMode, 0
0x07C3	0x3C09      	SUBLW      9
0x07C4	0x1803      	BTFSC      STATUS, 0
0x07C5	0x2FD6      	GOTO       L_CheckCfgMdInc110
0x07C6	0x3014      	MOVLW      20
0x07C7	0x0234      	SUBWF      _ConfigMode, 0
0x07C8	0x1803      	BTFSC      STATUS, 0
0x07C9	0x2FD6      	GOTO       L_CheckCfgMdInc110
L__CheckCfgMdInc227:
;bfpHeadset.c,530 :: 		if (11 == ConfigMode) ConfigMode = 20; else ConfigMode++;
0x07CA	0x300B      	MOVLW      11
0x07CB	0x0634      	XORWF      _ConfigMode, 0
0x07CC	0x1D03      	BTFSS      STATUS, 2
0x07CD	0x2FD1      	GOTO       L_CheckCfgMdInc111
0x07CE	0x3014      	MOVLW      20
0x07CF	0x00B4      	MOVWF      _ConfigMode
0x07D0	0x2FD5      	GOTO       L_CheckCfgMdInc112
L_CheckCfgMdInc111:
0x07D1	0x0A34      	INCF       _ConfigMode, 0
0x07D2	0x00F0      	MOVWF      R0
0x07D3	0x0870      	MOVF       R0, 0
0x07D4	0x00B4      	MOVWF      _ConfigMode
L_CheckCfgMdInc112:
;bfpHeadset.c,531 :: 		} else
0x07D5	0x2FD7      	GOTO       L_CheckCfgMdInc113
L_CheckCfgMdInc110:
;bfpHeadset.c,532 :: 		ConfigMode = 0;
0x07D6	0x01B4      	CLRF       _ConfigMode
L_CheckCfgMdInc113:
;bfpHeadset.c,533 :: 		}
L_end_CheckCfgMdInc:
0x07D7	0x0008      	RETURN
; end of _CheckCfgMdInc
_Div_8x8_U:
;__Lib_Math.c,189 :: 		
;__Lib_Math.c,196 :: 		
0x07D8	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,197 :: 		
0x07D9	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,198 :: 		
0x07DA	0x01F8      	CLRF       R8
;__Lib_Math.c,199 :: 		
0x07DB	0x3008      	MOVLW      8
;__Lib_Math.c,200 :: 		
0x07DC	0x00FC      	MOVWF      R12
;__Lib_Math.c,201 :: 		
0x07DD	0x0D70      	RLF        R0, 0
;__Lib_Math.c,202 :: 		
0x07DE	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,203 :: 		
0x07DF	0x0874      	MOVF       R4, 0
;__Lib_Math.c,204 :: 		
0x07E0	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,205 :: 		
0x07E1	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,206 :: 		
0x07E2	0x2FE5      	GOTO       $+3
;__Lib_Math.c,207 :: 		
0x07E3	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,208 :: 		
0x07E4	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,209 :: 		
0x07E5	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,210 :: 		
0x07E6	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,211 :: 		
0x07E7	0x2FDD      	GOTO       $-10
;__Lib_Math.c,213 :: 		
L_end_Div_8x8_U:
0x07E8	0x0008      	RETURN
; end of _Div_8x8_U
_EEPROM_Read:
;__Lib_EEPROM.c,4 :: 		
;__Lib_EEPROM.c,5 :: 		
0x07E9	0x1283      	BCF        STATUS, 5
0x07EA	0x083C      	MOVF       FARG_EEPROM_Read_Address, 0
0x07EB	0x1683      	BSF        STATUS, 5
0x07EC	0x009B      	MOVWF      EEADR
;__Lib_EEPROM.c,6 :: 		
0x07ED	0x139C      	BCF        EECON1, 7
;__Lib_EEPROM.c,12 :: 		
0x07EE	0x141C      	BSF        EECON1, 0
;__Lib_EEPROM.c,13 :: 		
0x07EF	0x081A      	MOVF       EEDATA, 0
0x07F0	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,14 :: 		
L_end_EEPROM_Read:
0x07F1	0x0008      	RETURN
; end of _EEPROM_Read
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [137]    _interrupt
0x008D     [823]    _SendAT
0x03C4     [482]    _main
0x05A6     [276]    _TurnOn
0x06BA      [91]    _TurnOff
0x0715      [65]    _PresentConfigVal
0x0756      [47]    _UARTWrite
0x0785      [30]    _CheckCfgMdDec
0x07A3      [30]    _EEPROM_Write
0x07C1      [23]    _CheckCfgMdInc
0x07D8      [17]    _Div_8x8_U
0x07E9       [9]    _EEPROM_Read
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [0]    GP2_bit
0x0005       [0]    GP5_bit
0x0005       [0]    GP0_bit
0x0005       [0]    GP4_bit
0x0005       [0]    GP1_bit
0x0005       [1]    GPIO
0x000A       [1]    PCLATH
0x000B       [0]    GIE_bit
0x000B       [0]    GPIE_bit
0x000B       [0]    TMR0IF_bit
0x000B       [0]    GPIF_bit
0x000B       [1]    INTCON
0x000B       [0]    INTF_bit
0x000B       [0]    TMR0IE_bit
0x0019       [1]    CMCON0
0x0023       [1]    _FMFreq
0x0024       [1]    _Seq
0x0025       [1]    _MicGain
0x0026       [1]    _SpeakerVolume
0x0027       [1]    _RingerLevel
0x0028       [1]    _FMVolume
0x0029       [1]    _RingTone
0x002A       [0]    _Power
0x002A       [0]    _LastPush
0x002A       [0]    _FMFreqChangeMode
0x002A       [0]    _BTMode
0x002A       [0]    _PushedNoRotate
0x002A       [0]    _LastDat
0x002A       [0]    _RotHasPushed
0x002A       [0]    _LastClk
0x002B       [1]    _NoActivity
0x002C       [0]    _BTIsPlaying
0x002D       [1]    _RotateAct
0x002E       [1]    _BTPairMode
0x002F       [1]    ___savePCLATH
0x0030       [1]    ___saveSTATUS
0x0031       [1]    _BeepTim
0x0032       [2]    ___DoICPAddr
0x0034       [1]    _ConfigMode
0x0035       [1]    TurnOff_v_L0
0x0036       [1]    TurnOff_f_L0
0x0037       [1]    FARG_EEPROM_Write_Address
0x0038       [1]    FARG_EEPROM_Write_data_
0x0039       [1]    FARG_SendAT_cmd
0x003A       [1]    FARG_SendAT_wait200
0x003B       [1]    SendAT_k_L0
0x003C       [1]    FARG_UARTWrite_dt
0x003C       [1]    FARG_EEPROM_Read_Address
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISIO
0x0096       [1]    IOC
0x009A       [1]    EEDATA
0x009B       [1]    EEADR
0x009C       [1]    EECON1
0x009D       [1]    EECON2
0x009F       [1]    ANSEL
//** Label List: ** 
//----------------------------------------------
  L_UARTWrite0
  L_UARTWrite1
  L_UARTWrite2
  L_UARTWrite3
  L_UARTWrite4
  L_UARTWrite5
  L_UARTWrite6
  L_UARTWrite7
  L_SendAT8
  L_SendAT9
  L_SendAT10
  L_SendAT11
  L_SendAT12
  L_SendAT13
  L_SendAT14
  L_SendAT15
  L_SendAT16
  L_SendAT17
  L_SendAT18
  L_SendAT19
  L_SendAT20
  L_SendAT21
  L_SendAT22
  L_SendAT23
  L_SendAT24
  L_SendAT25
  L_SendAT26
  L_SendAT27
  L_SendAT28
  L_SendAT29
  L_SendAT30
  L_SendAT31
  L_SendAT32
  L_SendAT33
  L_SendAT34
  L_SendAT35
  L_SendAT36
  L_SendAT37
  L_SendAT38
  L_SendAT39
  L_SendAT40
  L_SendAT41
  L_SendAT42
  L_SendAT43
  L_SendAT44
  L_SendAT45
  L_SendAT46
  L_SendAT47
  L_SendAT48
  L_SendAT49
  L_SendAT50
  L_SendAT51
  L_SendAT52
  L_SendAT53
  L_SendAT54
  L_SendAT55
  L_SendAT56
  L_SendAT57
  L_SendAT58
  L_SendAT59
  L_SendAT60
  L_SendAT61
  L_SendAT62
  L_SendAT63
  L_SendAT64
  L_SendAT65
  L_SendAT66
  L_SendAT67
  L_PresentConfigVal68
  L_PresentConfigVal69
  L_PresentConfigVal70
  L_PresentConfigVal71
  L_PresentConfigVal72
  L_PresentConfigVal73
  L_TurnOn74
  L_TurnOn75
  L_TurnOn76
  L_TurnOn77
  L_TurnOn78
  L_TurnOn79
  L_TurnOn80
  L_TurnOn81
  L_TurnOn82
  L_TurnOn83
  L_TurnOn84
  L_TurnOn85
  L_TurnOn86
  L_TurnOn87
  L_TurnOn88
  L_TurnOn89
  L_TurnOn90
  L_TurnOn91
  L_TurnOn92
  L_TurnOff93
  L_TurnOff94
  L_TurnOff95
  L_TurnOff96
  L_TurnOff97
  L_TurnOff98
  L_TurnOff99
  L_CheckCfgMdDec100
  L_CheckCfgMdDec101
  L_CheckCfgMdDec102
  L_CheckCfgMdDec103
  L_CheckCfgMdDec104
  L_CheckCfgMdDec105
  L_CheckCfgMdDec106
  L_CheckCfgMdDec107
  L_CheckCfgMdInc108
  L_CheckCfgMdInc109
  L_CheckCfgMdInc110
  L_CheckCfgMdInc111
  L_CheckCfgMdInc112
  L_CheckCfgMdInc113
  L_interrupt114
  L_interrupt115
  L_interrupt116
  L_interrupt117
  L_interrupt118
  L_interrupt119
  L_interrupt120
  L_interrupt121
  L_interrupt122
  L_interrupt123
  L_interrupt124
  L_interrupt125
  L_interrupt126
  L_interrupt127
  L_interrupt128
  L_interrupt129
  L_interrupt130
  L_interrupt131
  L_interrupt132
  L_interrupt133
  L_interrupt134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L_main141
  L_main142
  L_main143
  L_main144
  L_main145
  L_main146
  L_main147
  L_main148
  L_main149
  L_main150
  L_main151
  L_main152
  L_main153
  L_main154
  L_main155
  L_main156
  L_main157
  L_main158
  L_main159
  L_main160
  L_main161
  L_main162
  L_main163
  L_main164
  L_main165
  L_main166
  L_main167
  L_main168
  L_main169
  L_main170
  L_main171
  L_main172
  L_main173
  L_main174
  L_main175
  L_main176
  L_main177
  L_main178
  L_main179
  L_main180
  L_main181
  L_main182
  L_main183
  L_main184
  L_main185
  L_main186
  L_main187
  L_main188
  L_main189
  L_main190
  L_main191
  L_main192
  L_main193
  L_main194
  L_main195
  L_main196
  L_main197
  L_main198
  L_main199
  L_main200
  L_main201
  L_main202
  L_main203
  L_main204
  L_main205
  L_main206
  L_main207
  L_main208
  L_main209
  L_main210
  L_main211
  L_main212
  L_main213
  L_main214
  L_main215
  L_main216
  L_main217
  L__SendAT218
  L__SendAT219
  L__SendAT220
  L__SendAT221
  L__SendAT222
  L__SendAT223
  L__SendAT224
  L__TurnOn225
  L__CheckCfgMdDec226
  L__CheckCfgMdInc227
  L__interrupt228
  L__main229
  L__main230
  L__main231
  L__main232
  L__main233
  L__main234
  L_end_UARTWrite
  _UARTWrite
  L_end_SendAT
  _SendAT
  L_end_PresentConfigVal
  _PresentConfigVal
  L_end_TurnOn
  _TurnOn
  L__TurnOn239
  L__TurnOn240
  L_end_TurnOff
  _TurnOff
  L_end_CheckCfgMdDec
  _CheckCfgMdDec
  L_end_CheckCfgMdInc
  _CheckCfgMdInc
  L_end_interrupt
  _interrupt
  L__interrupt245
  L__interrupt246
  L__interrupt247
  L__interrupt248
  L__interrupt249
  L__interrupt250
  L__interrupt251
  L__interrupt252
  L__interrupt253
  L__interrupt254
  L__interrupt255
  L_end_main
  _main
  L__main257
  L__main258
  L__main259
  L__main260
  L__main261
  L__main262
  L__main263
  L__main264
  L_EEPROM_Write0
  L_EEPROM_Write1
  L_end_EEPROM_Read
  _EEPROM_Read
  L_end_EEPROM_Write
  _EEPROM_Write
  L__EEPROM_Write4
  L__EEPROM_Write5
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Mul_8x8_U
  _Mul_8x8_U
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_UARTWrite0
  L_UARTWrite1
  L_UARTWrite2
  L_UARTWrite3
  L_UARTWrite4
  L_UARTWrite5
  L_UARTWrite6
  L_UARTWrite7
  L_SendAT8
  L_SendAT9
  L_SendAT10
  L_SendAT11
  L_SendAT12
  L_SendAT13
  L_SendAT14
  L_SendAT15
  L_SendAT16
  L_SendAT17
  L_SendAT18
  L_SendAT19
  L_SendAT20
  L_SendAT21
  L_SendAT22
  L_SendAT23
  L_SendAT24
  L_SendAT25
  L_SendAT26
  L_SendAT27
  L_SendAT28
  L_SendAT29
  L_SendAT30
  L_SendAT31
  L_SendAT32
  L_SendAT33
  L_SendAT34
  L_SendAT35
  L_SendAT36
  L_SendAT37
  L_SendAT38
  L_SendAT39
  L_SendAT40
  L_SendAT41
  L_SendAT42
  L_SendAT43
  L_SendAT44
  L_SendAT45
  L_SendAT46
  L_SendAT47
  L_SendAT48
  L_SendAT49
  L_SendAT50
  L_SendAT51
  L_SendAT52
  L_SendAT53
  L_SendAT54
  L_SendAT55
  L_SendAT56
  L_SendAT57
  L_SendAT58
  L_SendAT59
  L_SendAT60
  L_SendAT61
  L_SendAT62
  L_SendAT63
  L_SendAT64
  L_SendAT65
  L_SendAT66
  L_SendAT67
  L_PresentConfigVal68
  L_PresentConfigVal69
  L_PresentConfigVal70
  L_PresentConfigVal71
  L_PresentConfigVal72
  L_PresentConfigVal73
  L_TurnOn74
  L_TurnOn75
  L_TurnOn76
  L_TurnOn77
  L_TurnOn78
  L_TurnOn79
  L_TurnOn80
  L_TurnOn81
  L_TurnOn82
  L_TurnOn83
  L_TurnOn84
  L_TurnOn85
  L_TurnOn86
  L_TurnOn87
  L_TurnOn88
  L_TurnOn89
  L_TurnOn90
  L_TurnOn91
  L_TurnOn92
  L_TurnOff93
  L_TurnOff94
  L_TurnOff95
  L_TurnOff96
  L_TurnOff97
  L_TurnOff98
  L_TurnOff99
  L_CheckCfgMdDec100
  L_CheckCfgMdDec101
  L_CheckCfgMdDec102
  L_CheckCfgMdDec103
  L_CheckCfgMdDec104
  L_CheckCfgMdDec105
  L_CheckCfgMdDec106
  L_CheckCfgMdDec107
  L_CheckCfgMdInc108
  L_CheckCfgMdInc109
  L_CheckCfgMdInc110
  L_CheckCfgMdInc111
  L_CheckCfgMdInc112
  L_CheckCfgMdInc113
  L_interrupt114
  L_interrupt115
  L_interrupt116
  L_interrupt117
  L_interrupt118
  L_interrupt119
  L_interrupt120
  L_interrupt121
  L_interrupt122
  L_interrupt123
  L_interrupt124
  L_interrupt125
  L_interrupt126
  L_interrupt127
  L_interrupt128
  L_interrupt129
  L_interrupt130
  L_interrupt131
  L_interrupt132
  L_interrupt133
  L_interrupt134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L_main141
  L_main142
  L_main143
  L_main144
  L_main145
  L_main146
  L_main147
  L_main148
  L_main149
  L_main150
  L_main151
  L_main152
  L_main153
  L_main154
  L_main155
  L_main156
  L_main157
  L_main158
  L_main159
  L_main160
  L_main161
  L_main162
  L_main163
  L_main164
  L_main165
  L_main166
  L_main167
  L_main168
  L_main169
  L_main170
  L_main171
  L_main172
  L_main173
  L_main174
  L_main175
  L_main176
  L_main177
  L_main178
  L_main179
  L_main180
  L_main181
  L_main182
  L_main183
  L_main184
  L_main185
  L_main186
  L_main187
  L_main188
  L_main189
  L_main190
  L_main191
  L_main192
  L_main193
  L_main194
  L_main195
  L_main196
  L_main197
  L_main198
  L_main199
  L_main200
  L_main201
  L_main202
  L_main203
  L_main204
  L_main205
  L_main206
  L_main207
  L_main208
  L_main209
  L_main210
  L_main211
  L_main212
  L_main213
  L_main214
  L_main215
  L_main216
  L_main217
  L__SendAT218
  L__SendAT219
  L__SendAT220
  L__SendAT221
  L__SendAT222
  L__SendAT223
  L__SendAT224
  L__TurnOn225
  L__CheckCfgMdDec226
  L__CheckCfgMdInc227
  L__interrupt228
  L__main229
  L__main230
  L__main231
  L__main232
  L__main233
  L__main234
  L_end_UARTWrite
  _UARTWrite
  L_end_SendAT
  _SendAT
  L_end_PresentConfigVal
  _PresentConfigVal
  L_end_TurnOn
  _TurnOn
  L__TurnOn239
  L__TurnOn240
  L_end_TurnOff
  _TurnOff
  L_end_CheckCfgMdDec
  _CheckCfgMdDec
  L_end_CheckCfgMdInc
  _CheckCfgMdInc
  L_end_interrupt
  _interrupt
  L__interrupt245
  L__interrupt246
  L__interrupt247
  L__interrupt248
  L__interrupt249
  L__interrupt250
  L__interrupt251
  L__interrupt252
  L__interrupt253
  L__interrupt254
  L__interrupt255
  L_end_main
  _main
  L__main257
  L__main258
  L__main259
  L__main260
  L__main261
  L__main262
  L__main263
  L__main264
